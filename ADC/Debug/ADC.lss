
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002a9e  00002b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080008c  0080008c  00002b5e  2**0
                  ALLOC
  3 .stab         000027a8  00000000  00000000  00002b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001172  00000000  00000000  00005308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000647a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000672a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008373  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000925e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a00c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b3 13 	jmp	0x2766	; 0x2766 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 14 	call	0x2858	; 0x2858 <main>
      8a:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer_Init>:
 * @param T_cfg,contain configuration struct
 *
 * Description : Initialize the timer
 */
uint8_t Timer_Init(Timer_cfg_s *T_cfg)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer_Init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9a 83       	std	Y+2, r25	; 0x02
     b54:	89 83       	std	Y+1, r24	; 0x01
	if(NULL_PTR != T_cfg )
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	9a 81       	ldd	r25, Y+2	; 0x02
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	09 f4       	brne	.+2      	; 0xb60 <Timer_Init+0x1a>
     b5e:	a9 c0       	rjmp	.+338    	; 0xcb2 <Timer_Init+0x16c>
	{
		if((T_cfg->Ch) < NO_OF_CHANNELS)
     b60:	e9 81       	ldd	r30, Y+1	; 0x01
     b62:	fa 81       	ldd	r31, Y+2	; 0x02
     b64:	80 81       	ld	r24, Z
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	08 f0       	brcs	.+2      	; 0xb6c <Timer_Init+0x26>
     b6a:	a0 c0       	rjmp	.+320    	; 0xcac <Timer_Init+0x166>
		{
			if(TIMER0 == T_cfg->Ch)
     b6c:	e9 81       	ldd	r30, Y+1	; 0x01
     b6e:	fa 81       	ldd	r31, Y+2	; 0x02
     b70:	80 81       	ld	r24, Z
     b72:	88 23       	and	r24, r24
     b74:	09 f0       	breq	.+2      	; 0xb78 <Timer_Init+0x32>
     b76:	8b c0       	rjmp	.+278    	; 0xc8e <Timer_Init+0x148>
			{

				if(TIMER_MODE == T_cfg->Timer_Mode)
     b78:	e9 81       	ldd	r30, Y+1	; 0x01
     b7a:	fa 81       	ldd	r31, Y+2	; 0x02
     b7c:	83 81       	ldd	r24, Z+3	; 0x03
     b7e:	88 23       	and	r24, r24
     b80:	31 f4       	brne	.+12     	; 0xb8e <Timer_Init+0x48>
				{
					Timer0_PSC = T_cfg->PSC;
     b82:	e9 81       	ldd	r30, Y+1	; 0x01
     b84:	fa 81       	ldd	r31, Y+2	; 0x02
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	80 93 8c 00 	sts	0x008C, r24
     b8c:	47 c0       	rjmp	.+142    	; 0xc1c <Timer_Init+0xd6>

				}
				else if(COUNTER_MODE == T_cfg->Timer_Mode)
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	83 81       	ldd	r24, Z+3	; 0x03
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	09 f0       	breq	.+2      	; 0xb9a <Timer_Init+0x54>
     b98:	3e c0       	rjmp	.+124    	; 0xc16 <Timer_Init+0xd0>
				{
					Timer0_PSC = T_cfg->PSC;
     b9a:	e9 81       	ldd	r30, Y+1	; 0x01
     b9c:	fa 81       	ldd	r31, Y+2	; 0x02
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	80 93 8c 00 	sts	0x008C, r24
					if(T0_EXT_CLK_ON_FALLING == T_cfg->PSC)
     ba4:	e9 81       	ldd	r30, Y+1	; 0x01
     ba6:	fa 81       	ldd	r31, Y+2	; 0x02
     ba8:	81 81       	ldd	r24, Z+1	; 0x01
     baa:	86 30       	cpi	r24, 0x06	; 6
     bac:	b1 f4       	brne	.+44     	; 0xbda <Timer_Init+0x94>
					{
						SET_BIT(TCCR0,CS01);
     bae:	a3 e5       	ldi	r26, 0x53	; 83
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e3 e5       	ldi	r30, 0x53	; 83
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	82 60       	ori	r24, 0x02	; 2
     bba:	8c 93       	st	X, r24
						SET_BIT(TCCR0,CS02);
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	8c 93       	st	X, r24
						CLEAR_BIT(TCCR0,CS00);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	8c 93       	st	X, r24
     bd8:	21 c0       	rjmp	.+66     	; 0xc1c <Timer_Init+0xd6>
					}
					else if(T0_EXT_CLK_ON_RISSING == T_cfg->PSC)
     bda:	e9 81       	ldd	r30, Y+1	; 0x01
     bdc:	fa 81       	ldd	r31, Y+2	; 0x02
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	87 30       	cpi	r24, 0x07	; 7
     be2:	b1 f4       	brne	.+44     	; 0xc10 <Timer_Init+0xca>
					{
						SET_BIT(TCCR0,CS00);
     be4:	a3 e5       	ldi	r26, 0x53	; 83
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e3 e5       	ldi	r30, 0x53	; 83
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	8c 93       	st	X, r24
						SET_BIT(TCCR0,CS01);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	8c 93       	st	X, r24
						SET_BIT(TCCR0,CS02);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	84 60       	ori	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <Timer_Init+0xd6>
					}
					else
					{
						return ERROR_NOK;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	50 c0       	rjmp	.+160    	; 0xcb6 <Timer_Init+0x170>
					}
				}
				else
				{
					return ERROR_NOK;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	4d c0       	rjmp	.+154    	; 0xcb6 <Timer_Init+0x170>
				}
				if(INTERRUPT_MODE == T_cfg->Interrupt_Mode)
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	82 81       	ldd	r24, Z+2	; 0x02
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	01 f5       	brne	.+64     	; 0xc66 <Timer_Init+0x120>
				{
					SET_BIT(TIMSK,OCIE0);
     c26:	a9 e5       	ldi	r26, 0x59	; 89
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e9 e5       	ldi	r30, 0x59	; 89
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	82 60       	ori	r24, 0x02	; 2
     c32:	8c 93       	st	X, r24
					SET_BIT(TCCR0,WGM01);
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	88 60       	ori	r24, 0x08	; 8
     c40:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,WGM00);
     c42:	a3 e5       	ldi	r26, 0x53	; 83
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e3 e5       	ldi	r30, 0x53	; 83
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8f 7b       	andi	r24, 0xBF	; 191
     c4e:	8c 93       	st	X, r24
					Timer0_Mode = INTERRUPT_MODE;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 8d 00 	sts	0x008D, r24
					SET_BIT(SREG,I);
     c56:	af e5       	ldi	r26, 0x5F	; 95
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ef e5       	ldi	r30, 0x5F	; 95
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	80 68       	ori	r24, 0x80	; 128
     c62:	8c 93       	st	X, r24
     c64:	12 c0       	rjmp	.+36     	; 0xc8a <Timer_Init+0x144>
				}
				else if(POLLING_MODE == T_cfg->Interrupt_Mode)
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	88 23       	and	r24, r24
     c6e:	51 f4       	brne	.+20     	; 0xc84 <Timer_Init+0x13e>
				{
					CLEAR_BIT(TIMSK,TOIE0);
     c70:	a9 e5       	ldi	r26, 0x59	; 89
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e9 e5       	ldi	r30, 0x59	; 89
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8e 7f       	andi	r24, 0xFE	; 254
     c7c:	8c 93       	st	X, r24
					Timer0_Mode = POLLING_MODE;
     c7e:	10 92 8d 00 	sts	0x008D, r1
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <Timer_Init+0x144>
				}
				else
				{
					return ERROR_NOK;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8b 83       	std	Y+3, r24	; 0x03
     c88:	16 c0       	rjmp	.+44     	; 0xcb6 <Timer_Init+0x170>
				}
				return ERROR_OK;
     c8a:	1b 82       	std	Y+3, r1	; 0x03
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <Timer_Init+0x170>
			}
			else if(TIMER1 == T_cfg->Ch)
     c8e:	e9 81       	ldd	r30, Y+1	; 0x01
     c90:	fa 81       	ldd	r31, Y+2	; 0x02
     c92:	80 81       	ld	r24, Z
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	41 f0       	breq	.+16     	; 0xca8 <Timer_Init+0x162>
			{

			}
			else if(TIMER2 == T_cfg->Ch)
     c98:	e9 81       	ldd	r30, Y+1	; 0x01
     c9a:	fa 81       	ldd	r31, Y+2	; 0x02
     c9c:	80 81       	ld	r24, Z
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	19 f0       	breq	.+6      	; 0xca8 <Timer_Init+0x162>
			{

			}
			else
			{
				return ERROR_NOK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	8b 83       	std	Y+3, r24	; 0x03
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <Timer_Init+0x170>
			}
		}else
		{
			return ERROR_NOK;
		}
		return ERROR_OK;
     ca8:	1b 82       	std	Y+3, r1	; 0x03
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <Timer_Init+0x170>
			{
				return ERROR_NOK;
			}
		}else
		{
			return ERROR_NOK;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8b 83       	std	Y+3, r24	; 0x03
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <Timer_Init+0x170>
		}
		return ERROR_OK;
	}
	else
	{
		return ERROR_NOK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8b 83       	std	Y+3, r24	; 0x03
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <Timer_Stop>:
 * @param Channel,which Timer to stop
 *
 * Description : Stop the chosen timer
 */
uint8_t Timer_Stop(uint8_t Timer_Channel)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <Timer_Stop+0x6>
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	89 83       	std	Y+1, r24	; 0x01
	if(Timer_Channel < NO_OF_CHANNELS)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	d0 f4       	brcc	.+52     	; 0xd0a <Timer_Stop+0x46>
	{
		if(TIMER0 == Timer_Channel )
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	88 23       	and	r24, r24
     cda:	a9 f4       	brne	.+42     	; 0xd06 <Timer_Stop+0x42>
		{
			CLEAR_BIT(TCCR0,CS00);
     cdc:	a3 e5       	ldi	r26, 0x53	; 83
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e3 e5       	ldi	r30, 0x53	; 83
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8e 7f       	andi	r24, 0xFE	; 254
     ce8:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS01);
     cea:	a3 e5       	ldi	r26, 0x53	; 83
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e3 e5       	ldi	r30, 0x53	; 83
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8d 7f       	andi	r24, 0xFD	; 253
     cf6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,CS02);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8b 7f       	andi	r24, 0xFB	; 251
     d04:	8c 93       	st	X, r24

		}else
		{

		}
		return 	ERROR_OK;
     d06:	1a 82       	std	Y+2, r1	; 0x02
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <Timer_Stop+0x4a>
	}else
	{
		return ERROR_NOK;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	8a 83       	std	Y+2, r24	; 0x02
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <Timer_Start>:
 * Description : Function to start counting
 */


extern uint8_t Timer_Start(uint8_t Timer_Channel,uint32_t Tick_Counts)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <Timer_Start+0x6>
     d20:	00 d0       	rcall	.+0      	; 0xd22 <Timer_Start+0x8>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <Timer_Start+0xa>
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	4a 83       	std	Y+2, r20	; 0x02
     d2c:	5b 83       	std	Y+3, r21	; 0x03
     d2e:	6c 83       	std	Y+4, r22	; 0x04
     d30:	7d 83       	std	Y+5, r23	; 0x05
	if(Timer_Channel < NO_OF_CHANNELS)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	08 f0       	brcs	.+2      	; 0xd3a <Timer_Start+0x20>
     d38:	ba c0       	rjmp	.+372    	; 0xeae <Timer_Start+0x194>
	{
		if(Tick_Counts <= TIMER0_MAX)
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	ac 81       	ldd	r26, Y+4	; 0x04
     d40:	bd 81       	ldd	r27, Y+5	; 0x05
     d42:	8f 3f       	cpi	r24, 0xFF	; 255
     d44:	91 05       	cpc	r25, r1
     d46:	a1 05       	cpc	r26, r1
     d48:	b1 05       	cpc	r27, r1
     d4a:	09 f0       	breq	.+2      	; 0xd4e <Timer_Start+0x34>
     d4c:	40 f4       	brcc	.+16     	; 0xd5e <Timer_Start+0x44>
		{
			OCR0 = Tick_Counts;
     d4e:	ec e5       	ldi	r30, 0x5C	; 92
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	80 83       	st	Z, r24
		{
			return ERROR_NOK;
		}
		
		
		if(TIMER0 == Timer_Channel)
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	21 f0       	breq	.+8      	; 0xd64 <Timer_Start+0x4a>
     d5c:	9b c0       	rjmp	.+310    	; 0xe94 <Timer_Start+0x17a>
		if(Tick_Counts <= TIMER0_MAX)
		{
			OCR0 = Tick_Counts;
		}else
		{
			return ERROR_NOK;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8e 83       	std	Y+6, r24	; 0x06
     d62:	a7 c0       	rjmp	.+334    	; 0xeb2 <Timer_Start+0x198>
		}
		
		
		if(TIMER0 == Timer_Channel)
		{
			if(T0_NO_CLK == Timer0_PSC)
     d64:	80 91 8c 00 	lds	r24, 0x008C
     d68:	88 23       	and	r24, r24
     d6a:	b1 f4       	brne	.+44     	; 0xd98 <Timer_Start+0x7e>
			{
				CLEAR_BIT(TCCR0,CS00);
     d6c:	a3 e5       	ldi	r26, 0x53	; 83
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e3 e5       	ldi	r30, 0x53	; 83
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	8e 7f       	andi	r24, 0xFE	; 254
     d78:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
     d7a:	a3 e5       	ldi	r26, 0x53	; 83
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e3 e5       	ldi	r30, 0x53	; 83
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8d 7f       	andi	r24, 0xFD	; 253
     d86:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     d88:	a3 e5       	ldi	r26, 0x53	; 83
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e3 e5       	ldi	r30, 0x53	; 83
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8b 7f       	andi	r24, 0xFB	; 251
     d94:	8c 93       	st	X, r24
     d96:	7e c0       	rjmp	.+252    	; 0xe94 <Timer_Start+0x17a>
			}
			else if(T0_PSC_0 == Timer0_PSC)
     d98:	80 91 8c 00 	lds	r24, 0x008C
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	b1 f4       	brne	.+44     	; 0xdcc <Timer_Start+0xb2>
			{
				SET_BIT(TCCR0,CS00);
     da0:	a3 e5       	ldi	r26, 0x53	; 83
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e3 e5       	ldi	r30, 0x53	; 83
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
     dae:	a3 e5       	ldi	r26, 0x53	; 83
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e3 e5       	ldi	r30, 0x53	; 83
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8d 7f       	andi	r24, 0xFD	; 253
     dba:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     dbc:	a3 e5       	ldi	r26, 0x53	; 83
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e3 e5       	ldi	r30, 0x53	; 83
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8b 7f       	andi	r24, 0xFB	; 251
     dc8:	8c 93       	st	X, r24
     dca:	64 c0       	rjmp	.+200    	; 0xe94 <Timer_Start+0x17a>
			}
			else if(T0_PSC_8 == Timer0_PSC)
     dcc:	80 91 8c 00 	lds	r24, 0x008C
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	b1 f4       	brne	.+44     	; 0xe00 <Timer_Start+0xe6>
			{
				SET_BIT(TCCR0,CS01);
     dd4:	a3 e5       	ldi	r26, 0x53	; 83
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
     de2:	a3 e5       	ldi	r26, 0x53	; 83
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e3 e5       	ldi	r30, 0x53	; 83
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8e 7f       	andi	r24, 0xFE	; 254
     dee:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     df0:	a3 e5       	ldi	r26, 0x53	; 83
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e3 e5       	ldi	r30, 0x53	; 83
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8b 7f       	andi	r24, 0xFB	; 251
     dfc:	8c 93       	st	X, r24
     dfe:	4a c0       	rjmp	.+148    	; 0xe94 <Timer_Start+0x17a>
			}
			else if(T0_PSC_64 == Timer0_PSC)
     e00:	80 91 8c 00 	lds	r24, 0x008C
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	b1 f4       	brne	.+44     	; 0xe34 <Timer_Start+0x11a>
			{
				SET_BIT(TCCR0,CS00);
     e08:	a3 e5       	ldi	r26, 0x53	; 83
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e3 e5       	ldi	r30, 0x53	; 83
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	81 60       	ori	r24, 0x01	; 1
     e14:	8c 93       	st	X, r24
				SET_BIT(TCCR0,CS01);
     e16:	a3 e5       	ldi	r26, 0x53	; 83
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e3 e5       	ldi	r30, 0x53	; 83
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS02);
     e24:	a3 e5       	ldi	r26, 0x53	; 83
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e3 e5       	ldi	r30, 0x53	; 83
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8b 7f       	andi	r24, 0xFB	; 251
     e30:	8c 93       	st	X, r24
     e32:	30 c0       	rjmp	.+96     	; 0xe94 <Timer_Start+0x17a>
			}
			else if(T0_PSC_256 == Timer0_PSC)
     e34:	80 91 8c 00 	lds	r24, 0x008C
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	b1 f4       	brne	.+44     	; 0xe68 <Timer_Start+0x14e>
			{
				SET_BIT(TCCR0,CS02);
     e3c:	a3 e5       	ldi	r26, 0x53	; 83
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e3 e5       	ldi	r30, 0x53	; 83
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	84 60       	ori	r24, 0x04	; 4
     e48:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
     e4a:	a3 e5       	ldi	r26, 0x53	; 83
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e3 e5       	ldi	r30, 0x53	; 83
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8d 7f       	andi	r24, 0xFD	; 253
     e56:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS00);
     e58:	a3 e5       	ldi	r26, 0x53	; 83
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e3 e5       	ldi	r30, 0x53	; 83
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8e 7f       	andi	r24, 0xFE	; 254
     e64:	8c 93       	st	X, r24
     e66:	16 c0       	rjmp	.+44     	; 0xe94 <Timer_Start+0x17a>
			}
			else if(T0_PSC_1024 == Timer0_PSC)
     e68:	80 91 8c 00 	lds	r24, 0x008C
     e6c:	85 30       	cpi	r24, 0x05	; 5
     e6e:	79 f4       	brne	.+30     	; 0xe8e <Timer_Start+0x174>
			{
				TCCR0 |= (1<<CS00) | (1<<CS02);
     e70:	a3 e5       	ldi	r26, 0x53	; 83
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e3 e5       	ldi	r30, 0x53	; 83
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	85 60       	ori	r24, 0x05	; 5
     e7c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,CS01);
     e7e:	a3 e5       	ldi	r26, 0x53	; 83
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	8d 7f       	andi	r24, 0xFD	; 253
     e8a:	8c 93       	st	X, r24
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <Timer_Start+0x17a>
			}else
			{
				return ERROR_NOK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	8e 83       	std	Y+6, r24	; 0x06
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <Timer_Start+0x198>
		{

		}


		if(POLLING_MODE == Timer0_Mode)
     e94:	80 91 8d 00 	lds	r24, 0x008D
     e98:	88 23       	and	r24, r24
     e9a:	39 f0       	breq	.+14     	; 0xeaa <Timer_Start+0x190>
		{

		}else if(INTERRUPT_MODE == Timer0_Mode)
     e9c:	80 91 8d 00 	lds	r24, 0x008D
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	19 f0       	breq	.+6      	; 0xeaa <Timer_Start+0x190>
		{		
			
		}else
		{
			return ERROR_NOK;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8e 83       	std	Y+6, r24	; 0x06
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <Timer_Start+0x198>
		}
	return ERROR_OK;
     eaa:	1e 82       	std	Y+6, r1	; 0x06
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <Timer_Start+0x198>
	}else
	{
		return ERROR_NOK;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8e 83       	std	Y+6, r24	; 0x06
     eb2:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <Timer_Reset>:


extern uint8_t Timer_Reset(uint8_t Timer_Channel)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <Timer_Reset+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	if(Timer_Channel < NO_OF_CHANNELS)
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	78 f4       	brcc	.+30     	; 0xef6 <Timer_Reset+0x30>
	{
		if(TIMER0 == Timer_Channel)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	88 23       	and	r24, r24
     edc:	29 f4       	brne	.+10     	; 0xee8 <Timer_Reset+0x22>
		{
			TCNT0 = 0;
     ede:	e2 e5       	ldi	r30, 0x52	; 82
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	10 82       	st	Z, r1
			return ERROR_OK;
     ee4:	1a 82       	std	Y+2, r1	; 0x02
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <Timer_Reset+0x34>
		}else if(TIMER1 == Timer_Channel)
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	11 f4       	brne	.+4      	; 0xef2 <Timer_Reset+0x2c>
		{
			return ERROR_OK;
     eee:	1a 82       	std	Y+2, r1	; 0x02
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <Timer_Reset+0x34>
		}else
		{
			return ERROR_OK;
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <Timer_Reset+0x34>
		}
	}else
	{
		return ERROR_NOK;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <Timer_Get_TickTime>:

extern uint8_t Timer_Get_TickTime(uint8_t Timer_Channel, uint16_t *Timer_Time)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <Timer_Get_TickTime+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <Timer_Get_TickTime+0x8>
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	7b 83       	std	Y+3, r23	; 0x03
     f16:	6a 83       	std	Y+2, r22	; 0x02
	if(Timer_Channel < NO_OF_CHANNELS)
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	a8 f4       	brcc	.+42     	; 0xf48 <Timer_Get_TickTime+0x42>
	{
		if(TIMER0 == Timer_Channel)
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	88 23       	and	r24, r24
     f22:	59 f4       	brne	.+22     	; 0xf3a <Timer_Get_TickTime+0x34>
		{
			*Timer_Time = TCNT0;
     f24:	e2 e5       	ldi	r30, 0x52	; 82
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	ea 81       	ldd	r30, Y+2	; 0x02
     f30:	fb 81       	ldd	r31, Y+3	; 0x03
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	80 83       	st	Z, r24
			return ERROR_OK;
     f36:	1c 82       	std	Y+4, r1	; 0x04
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <Timer_Get_TickTime+0x46>
		}else if(TIMER1 == Timer_Channel)
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	11 f4       	brne	.+4      	; 0xf44 <Timer_Get_TickTime+0x3e>
		{
			return ERROR_OK;
     f40:	1c 82       	std	Y+4, r1	; 0x04
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <Timer_Get_TickTime+0x46>
		}else
		{
			return ERROR_OK;
     f44:	1c 82       	std	Y+4, r1	; 0x04
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <Timer_Get_TickTime+0x46>
		}

	}else
	{
		return ERROR_NOK;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	8c 83       	std	Y+4, r24	; 0x04
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <DIO_Init_Port>:
 * @param: Port_no, Port number sent by the user
 * @param: val, value to assign to port
 * Description: Function to initialize Port Direction and return status
 **************************************************************************/
uint8_t DIO_Init_Port(uint8_t Port_no , uint8_t val)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <DIO_Init_Port+0x6>
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no< number_of_ports)
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	78 f4       	brcc	.+30     	; 0xf90 <DIO_Init_Port+0x34>
	{
		*gapu8_DDR[Port_no]=val;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	88 2f       	mov	r24, r24
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	fc 01       	movw	r30, r24
     f7e:	e4 58       	subi	r30, 0x84	; 132
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	01 90       	ld	r0, Z+
     f84:	f0 81       	ld	r31, Z
     f86:	e0 2d       	mov	r30, r0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	80 83       	st	Z, r24
		return ERROR_OK;
     f8c:	1b 82       	std	Y+3, r1	; 0x03
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_Init_Port+0x38>
	}
	else
	{
		return ERROR_NOK;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	8b 83       	std	Y+3, r24	; 0x03
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <DIO_Init_Pin>:
 * @param: val, value to assign to pin
 * Description: Function to initialize Pin Direction and return status
 **************************************************************************/

uint8_t DIO_Init_Pin(uint8_t Pin_no, uint8_t val)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <DIO_Init_Pin+0x6>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <DIO_Init_Pin+0x8>
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port ,pin ;
	if (Pin_no < number_of_all_pins)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <DIO_Init_Pin+0x1a>
     fba:	5e c0       	rjmp	.+188    	; 0x1078 <DIO_Init_Pin+0xd6>
	{
		port = Pin_no / number_of_pins;
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	86 95       	lsr	r24
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	87 70       	andi	r24, 0x07	; 7
     fca:	89 83       	std	Y+1, r24	; 0x01
		if (val == HIGH)
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	31 f5       	brne	.+76     	; 0x101e <DIO_Init_Pin+0x7c>
		{
			SET_BIT(*gapu8_DDR[port],pin);
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	fc 01       	movw	r30, r24
     fde:	e4 58       	subi	r30, 0x84	; 132
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	a0 81       	ld	r26, Z
     fe4:	b1 81       	ldd	r27, Z+1	; 0x01
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	fc 01       	movw	r30, r24
     ff2:	e4 58       	subi	r30, 0x84	; 132
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	01 90       	ld	r0, Z+
     ff8:	f0 81       	ld	r31, Z
     ffa:	e0 2d       	mov	r30, r0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_Init_Pin+0x70>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_Init_Pin+0x6c>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
			return ERROR_OK;
    101a:	1d 82       	std	Y+5, r1	; 0x05
    101c:	2f c0       	rjmp	.+94     	; 0x107c <DIO_Init_Pin+0xda>
		}
		else if (val == LOW)
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	88 23       	and	r24, r24
    1022:	39 f5       	brne	.+78     	; 0x1072 <DIO_Init_Pin+0xd0>
		{
			CLEAR_BIT(*gapu8_DDR[port],pin);
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	fc 01       	movw	r30, r24
    1030:	e4 58       	subi	r30, 0x84	; 132
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	a0 81       	ld	r26, Z
    1036:	b1 81       	ldd	r27, Z+1	; 0x01
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	fc 01       	movw	r30, r24
    1044:	e4 58       	subi	r30, 0x84	; 132
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	01 90       	ld	r0, Z+
    104a:	f0 81       	ld	r31, Z
    104c:	e0 2d       	mov	r30, r0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_Init_Pin+0xc2>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_Init_Pin+0xbe>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24

			return ERROR_OK;
    106e:	1d 82       	std	Y+5, r1	; 0x05
    1070:	05 c0       	rjmp	.+10     	; 0x107c <DIO_Init_Pin+0xda>
		}
		else
		{
			return ERROR_NOK;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_Init_Pin+0xda>
		}
	}
	else
	{
		return ERROR_NOK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8d 83       	std	Y+5, r24	; 0x05
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <DIO_Port_Read>:
 * @param: *val, value to read from port
 * Description: Function to return Port value and return status
 **************************************************************************/

uint8_t DIO_Port_Read (uint8_t Port_no, uint8_t *val)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <DIO_Port_Read+0x6>
    1094:	00 d0       	rcall	.+0      	; 0x1096 <DIO_Port_Read+0x8>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	7b 83       	std	Y+3, r23	; 0x03
    109e:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no < number_of_ports)
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	84 30       	cpi	r24, 0x04	; 4
    10a4:	88 f4       	brcc	.+34     	; 0x10c8 <DIO_Port_Read+0x3a>
	{
		*val = *gapu8_PIN[Port_no];
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	fc 01       	movw	r30, r24
    10b2:	ec 57       	subi	r30, 0x7C	; 124
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	80 81       	ld	r24, Z
    10be:	ea 81       	ldd	r30, Y+2	; 0x02
    10c0:	fb 81       	ldd	r31, Y+3	; 0x03
    10c2:	80 83       	st	Z, r24
		return ERROR_OK;
    10c4:	1c 82       	std	Y+4, r1	; 0x04
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_Port_Read+0x3e>
	}
	else
	{
		return ERROR_NOK;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	8c 83       	std	Y+4, r24	; 0x04
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <DIO_Pin_Read>:
 * @param: *val, value to read from pin
 * Description: Function to return Pin value and return status
 **************************************************************************/

uint8_t DIO_Pin_Read (uint8_t Pin_no, uint8_t *val)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_Pin_Read+0x6>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <DIO_Pin_Read+0x8>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_Pin_Read+0xa>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	7d 83       	std	Y+5, r23	; 0x05
    10ee:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port , pin ;
	if (Pin_no < number_of_all_pins)
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	80 32       	cpi	r24, 0x20	; 32
    10f4:	90 f5       	brcc	.+100    	; 0x115a <DIO_Pin_Read+0x7e>
	{
		port = Pin_no / number_of_pins;
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	87 70       	andi	r24, 0x07	; 7
    1104:	89 83       	std	Y+1, r24	; 0x01
		*val = GET_BIT(*gapu8_PIN[port],pin);
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	fc 01       	movw	r30, r24
    1112:	ec 57       	subi	r30, 0x7C	; 124
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	01 90       	ld	r0, Z+
    1118:	f0 81       	ld	r31, Z
    111a:	e0 2d       	mov	r30, r0
    111c:	80 81       	ld	r24, Z
    111e:	48 2f       	mov	r20, r24
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_Pin_Read+0x56>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	2a 95       	dec	r18
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_Pin_Read+0x52>
    1136:	9a 01       	movw	r18, r20
    1138:	28 23       	and	r18, r24
    113a:	39 23       	and	r19, r25
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a9 01       	movw	r20, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_Pin_Read+0x6e>
    1146:	55 95       	asr	r21
    1148:	47 95       	ror	r20
    114a:	8a 95       	dec	r24
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_Pin_Read+0x6a>
    114e:	ca 01       	movw	r24, r20
    1150:	ec 81       	ldd	r30, Y+4	; 0x04
    1152:	fd 81       	ldd	r31, Y+5	; 0x05
    1154:	80 83       	st	Z, r24
		return ERROR_OK;
    1156:	1e 82       	std	Y+6, r1	; 0x06
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_Pin_Read+0x82>
	}
	else
	{
		return ERROR_NOK;
    115a:	51 e0       	ldi	r21, 0x01	; 1
    115c:	5e 83       	std	Y+6, r21	; 0x06
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    1160:	26 96       	adiw	r28, 0x06	; 6
    1162:	0f b6       	in	r0, 0x3f	; 63
    1164:	f8 94       	cli
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <DIO_Port_Write>:
 * @param: val, value to write to port
 * Description: Function to write Port value and return status
 **************************************************************************/

uint8_t DIO_Port_Write(uint8_t Port_no,uint8_t val)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_Port_Write+0x6>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
	if (Port_no < number_of_ports)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	78 f4       	brcc	.+30     	; 0x11a6 <DIO_Port_Write+0x34>
	{
		*gapu8_PORT[Port_no]=val;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	fc 01       	movw	r30, r24
    1194:	ec 58       	subi	r30, 0x8C	; 140
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	01 90       	ld	r0, Z+
    119a:	f0 81       	ld	r31, Z
    119c:	e0 2d       	mov	r30, r0
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	80 83       	st	Z, r24
		return ERROR_OK;
    11a2:	1b 82       	std	Y+3, r1	; 0x03
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_Port_Write+0x38>
	}
	else
	{
		return ERROR_NOK;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	8b 83       	std	Y+3, r24	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <DIO_Pin_Write>:
 * @param: val, value to write to pin
 * Description: Function to write Pin value and return status
 **************************************************************************/

uint8_t DIO_Pin_Write(uint8_t Pin_no,uint8_t val)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <DIO_Pin_Write+0x6>
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <DIO_Pin_Write+0x8>
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t port,pin;
	if(Pin_no < number_of_all_pins)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	80 32       	cpi	r24, 0x20	; 32
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <DIO_Pin_Write+0x1a>
    11d0:	5e c0       	rjmp	.+188    	; 0x128e <DIO_Pin_Write+0xd6>
	{
		port = Pin_no / number_of_pins;
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	86 95       	lsr	r24
    11d6:	86 95       	lsr	r24
    11d8:	86 95       	lsr	r24
    11da:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	87 70       	andi	r24, 0x07	; 7
    11e0:	89 83       	std	Y+1, r24	; 0x01
		if (val == HIGH)
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	31 f5       	brne	.+76     	; 0x1234 <DIO_Pin_Write+0x7c>
		{
			SET_BIT(*gapu8_PORT[port],pin);
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	fc 01       	movw	r30, r24
    11f4:	ec 58       	subi	r30, 0x8C	; 140
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	a0 81       	ld	r26, Z
    11fa:	b1 81       	ldd	r27, Z+1	; 0x01
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	fc 01       	movw	r30, r24
    1208:	ec 58       	subi	r30, 0x8C	; 140
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	01 90       	ld	r0, Z+
    120e:	f0 81       	ld	r31, Z
    1210:	e0 2d       	mov	r30, r0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_Pin_Write+0x70>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_Pin_Write+0x6c>
    122c:	84 2b       	or	r24, r20
    122e:	8c 93       	st	X, r24
			return ERROR_OK;
    1230:	1d 82       	std	Y+5, r1	; 0x05
    1232:	2f c0       	rjmp	.+94     	; 0x1292 <DIO_Pin_Write+0xda>
		}
		else if (val == LOW)
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	88 23       	and	r24, r24
    1238:	39 f5       	brne	.+78     	; 0x1288 <DIO_Pin_Write+0xd0>
		{
			CLEAR_BIT(*gapu8_PORT[port],pin);
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	fc 01       	movw	r30, r24
    1246:	ec 58       	subi	r30, 0x8C	; 140
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	a0 81       	ld	r26, Z
    124c:	b1 81       	ldd	r27, Z+1	; 0x01
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	88 2f       	mov	r24, r24
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	fc 01       	movw	r30, r24
    125a:	ec 58       	subi	r30, 0x8C	; 140
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	01 90       	ld	r0, Z+
    1260:	f0 81       	ld	r31, Z
    1262:	e0 2d       	mov	r30, r0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_Pin_Write+0xc2>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_Pin_Write+0xbe>
    127e:	80 95       	com	r24
    1280:	84 23       	and	r24, r20
    1282:	8c 93       	st	X, r24
			return ERROR_OK;
    1284:	1d 82       	std	Y+5, r1	; 0x05
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <DIO_Pin_Write+0xda>
		}
		else
		{
			return ERROR_NOK;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_Pin_Write+0xda>
		}
	}
	else
	{
		return ERROR_NOK;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <DIO_Activate_Pullup>:
 * @param: Pin_no, Pin number sent by the user
 * Description: Function to enable the internal Pull-up resistor of a Pin
 **************************************************************************/

uint8_t DIO_Activate_Pullup(uint8_t Pin_no)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <DIO_Activate_Pullup+0x6>
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <DIO_Activate_Pullup+0x8>
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t port ,pin ;
	if (Pin_no < number_of_all_pins)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	80 32       	cpi	r24, 0x20	; 32
    12b6:	70 f5       	brcc	.+92     	; 0x1314 <DIO_Activate_Pullup+0x70>
	{
		port = Pin_no / number_of_pins;
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	86 95       	lsr	r24
    12bc:	86 95       	lsr	r24
    12be:	86 95       	lsr	r24
    12c0:	8a 83       	std	Y+2, r24	; 0x02
		pin = Pin_no % number_of_pins;
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	87 70       	andi	r24, 0x07	; 7
    12c6:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(*gapu8_PORT[port],pin);
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	88 2f       	mov	r24, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	fc 01       	movw	r30, r24
    12d4:	ec 58       	subi	r30, 0x8C	; 140
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	a0 81       	ld	r26, Z
    12da:	b1 81       	ldd	r27, Z+1	; 0x01
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	fc 01       	movw	r30, r24
    12e8:	ec 58       	subi	r30, 0x8C	; 140
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	01 90       	ld	r0, Z+
    12ee:	f0 81       	ld	r31, Z
    12f0:	e0 2d       	mov	r30, r0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_Activate_Pullup+0x64>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_Activate_Pullup+0x60>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
		return ERROR_OK;
    1310:	1c 82       	std	Y+4, r1	; 0x04
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_Activate_Pullup+0x74>
	}
	else
	{
		return ERROR_NOK;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	8c 83       	std	Y+4, r24	; 0x04
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
static uint8_t gu8_conversion =0;
static uint8_t gu8_INT =0;
void ADC_init(ADC_Config_str *ADC_cfg)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <ADC_init+0x6>
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
	if (NULL_PTR != ADC_cfg)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	09 f4       	brne	.+2      	; 0x1340 <ADC_init+0x18>
    133e:	90 c0       	rjmp	.+288    	; 0x1460 <ADC_init+0x138>
	{
		if ((ADC_cfg->Channel) < ADC_NO_OF_CHANNELS)
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <ADC_init+0x24>
    134a:	8a c0       	rjmp	.+276    	; 0x1460 <ADC_init+0x138>
		{
			ADMUX=(ADMUX&0x3F) | ADC_cfg->Ref;
    134c:	a7 e2       	ldi	r26, 0x27	; 39
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e7 e2       	ldi	r30, 0x27	; 39
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	98 2f       	mov	r25, r24
    1358:	9f 73       	andi	r25, 0x3F	; 63
    135a:	e9 81       	ldd	r30, Y+1	; 0x01
    135c:	fa 81       	ldd	r31, Y+2	; 0x02
    135e:	84 81       	ldd	r24, Z+4	; 0x04
    1360:	89 2b       	or	r24, r25
    1362:	8c 93       	st	X, r24
			ADMUX=(ADMUX&0xDF) | ADC_cfg->Adj;
    1364:	a7 e2       	ldi	r26, 0x27	; 39
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e7 e2       	ldi	r30, 0x27	; 39
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	98 2f       	mov	r25, r24
    1370:	9f 7d       	andi	r25, 0xDF	; 223
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	83 81       	ldd	r24, Z+3	; 0x03
    1378:	89 2b       	or	r24, r25
    137a:	8c 93       	st	X, r24
			ADMUX=(ADMUX&0xE0) | ADC_cfg->Channel;
    137c:	a7 e2       	ldi	r26, 0x27	; 39
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e7 e2       	ldi	r30, 0x27	; 39
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	98 2f       	mov	r25, r24
    1388:	90 7e       	andi	r25, 0xE0	; 224
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	89 2b       	or	r24, r25
    1392:	8c 93       	st	X, r24
			SFIOR = (SFIOR&0x1F)| ADC_cfg->Trigger_mode;
    1394:	a0 e5       	ldi	r26, 0x50	; 80
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e0 e5       	ldi	r30, 0x50	; 80
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	98 2f       	mov	r25, r24
    13a0:	9f 71       	andi	r25, 0x1F	; 31
    13a2:	e9 81       	ldd	r30, Y+1	; 0x01
    13a4:	fa 81       	ldd	r31, Y+2	; 0x02
    13a6:	81 81       	ldd	r24, Z+1	; 0x01
    13a8:	89 2b       	or	r24, r25
    13aa:	8c 93       	st	X, r24
			if(ADC_cfg->Auto_trig == ADC_AUTO_TRIGGER)
    13ac:	e9 81       	ldd	r30, Y+1	; 0x01
    13ae:	fa 81       	ldd	r31, Y+2	; 0x02
    13b0:	86 81       	ldd	r24, Z+6	; 0x06
    13b2:	88 23       	and	r24, r24
    13b4:	39 f4       	brne	.+14     	; 0x13c4 <ADC_init+0x9c>
			{
				ADCSRA|=(1<<ADATE);
    13b6:	a6 e2       	ldi	r26, 0x26	; 38
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e6 e2       	ldi	r30, 0x26	; 38
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 62       	ori	r24, 0x20	; 32
    13c2:	8c 93       	st	X, r24
			}
			if((ADC_cfg->INT_mode) == ADC_POLLING)
    13c4:	e9 81       	ldd	r30, Y+1	; 0x01
    13c6:	fa 81       	ldd	r31, Y+2	; 0x02
    13c8:	85 81       	ldd	r24, Z+5	; 0x05
    13ca:	88 23       	and	r24, r24
    13cc:	d9 f4       	brne	.+54     	; 0x1404 <ADC_init+0xdc>
			{
				ADCSRA&=~(1<<ADIE);
    13ce:	a6 e2       	ldi	r26, 0x26	; 38
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e6 e2       	ldi	r30, 0x26	; 38
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	87 7f       	andi	r24, 0xF7	; 247
    13da:	8c 93       	st	X, r24
				gu8_INT = ADC_POLLING;
    13dc:	10 92 91 00 	sts	0x0091, r1
				ADCSRA = (ADCSRA & 0xF8) | ADC_cfg->Pre_Scaller;
    13e0:	a6 e2       	ldi	r26, 0x26	; 38
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e6 e2       	ldi	r30, 0x26	; 38
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	98 2f       	mov	r25, r24
    13ec:	98 7f       	andi	r25, 0xF8	; 248
    13ee:	e9 81       	ldd	r30, Y+1	; 0x01
    13f0:	fa 81       	ldd	r31, Y+2	; 0x02
    13f2:	80 81       	ld	r24, Z
    13f4:	89 2b       	or	r24, r25
    13f6:	8c 93       	st	X, r24
				gu8_conversion= ADC_cfg->Auto_trig;
    13f8:	e9 81       	ldd	r30, Y+1	; 0x01
    13fa:	fa 81       	ldd	r31, Y+2	; 0x02
    13fc:	86 81       	ldd	r24, Z+6	; 0x06
    13fe:	80 93 90 00 	sts	0x0090, r24
    1402:	27 c0       	rjmp	.+78     	; 0x1452 <ADC_init+0x12a>
			}
			else if ((ADC_cfg->INT_mode)== ADC_INTERRUPT)
    1404:	e9 81       	ldd	r30, Y+1	; 0x01
    1406:	fa 81       	ldd	r31, Y+2	; 0x02
    1408:	85 81       	ldd	r24, Z+5	; 0x05
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	11 f5       	brne	.+68     	; 0x1452 <ADC_init+0x12a>
			{
				SREG|=(1<<I);
    140e:	af e5       	ldi	r26, 0x5F	; 95
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ef e5       	ldi	r30, 0x5F	; 95
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 68       	ori	r24, 0x80	; 128
    141a:	8c 93       	st	X, r24
				ADCSRA|=(1<<ADIE);
    141c:	a6 e2       	ldi	r26, 0x26	; 38
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e6 e2       	ldi	r30, 0x26	; 38
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	8c 93       	st	X, r24
				gu8_INT= ADC_INTERRUPT;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 91 00 	sts	0x0091, r24
				ADCSRA = (ADCSRA & 0xF8) | ADC_cfg->Pre_Scaller;
    1430:	a6 e2       	ldi	r26, 0x26	; 38
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e6 e2       	ldi	r30, 0x26	; 38
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	98 2f       	mov	r25, r24
    143c:	98 7f       	andi	r25, 0xF8	; 248
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	80 81       	ld	r24, Z
    1444:	89 2b       	or	r24, r25
    1446:	8c 93       	st	X, r24
				gu8_conversion= ADC_cfg->Auto_trig;
    1448:	e9 81       	ldd	r30, Y+1	; 0x01
    144a:	fa 81       	ldd	r31, Y+2	; 0x02
    144c:	86 81       	ldd	r24, Z+6	; 0x06
    144e:	80 93 90 00 	sts	0x0090, r24
			}
			ADCSRA|=(1<<ADEN);
    1452:	a6 e2       	ldi	r26, 0x26	; 38
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e6 e2       	ldi	r30, 0x26	; 38
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	80 68       	ori	r24, 0x80	; 128
    145e:	8c 93       	st	X, r24
	}
	else
	{

	}
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <ADC_readChannel>:

void ADC_readChannel(uint8_t channel_num)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	0f 92       	push	r0
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	87 70       	andi	r24, 0x07	; 7
    147a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    147c:	a7 e2       	ldi	r26, 0x27	; 39
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e7 e2       	ldi	r30, 0x27	; 39
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	80 7e       	andi	r24, 0xE0	; 224
    1488:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    148a:	a7 e2       	ldi	r26, 0x27	; 39
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e7 e2       	ldi	r30, 0x27	; 39
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	90 81       	ld	r25, Z
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	89 2b       	or	r24, r25
    1498:	8c 93       	st	X, r24

	if(gu8_INT == ADC_POLLING)
    149a:	80 91 91 00 	lds	r24, 0x0091
    149e:	88 23       	and	r24, r24
    14a0:	b9 f5       	brne	.+110    	; 0x1510 <ADC_readChannel+0xa6>
	{
		if(gu8_conversion == ADC_START_CONV)
    14a2:	80 91 90 00 	lds	r24, 0x0090
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <ADC_readChannel+0x42>
    14aa:	4d c0       	rjmp	.+154    	; 0x1546 <ADC_readChannel+0xdc>
		{
			SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    14ac:	a6 e2       	ldi	r26, 0x26	; 38
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e6 e2       	ldi	r30, 0x26	; 38
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	8c 93       	st	X, r24
			while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    14ba:	e6 e2       	ldi	r30, 0x26	; 38
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	80 71       	andi	r24, 0x10	; 16
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	b9 f3       	breq	.-18     	; 0x14ba <ADC_readChannel+0x50>
			SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    14cc:	a6 e2       	ldi	r26, 0x26	; 38
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e6 e2       	ldi	r30, 0x26	; 38
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 61       	ori	r24, 0x10	; 16
    14d8:	8c 93       	st	X, r24
			gu16_res = (uint16_t)ADCL;
    14da:	e4 e2       	ldi	r30, 0x24	; 36
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	90 93 8f 00 	sts	0x008F, r25
    14e8:	80 93 8e 00 	sts	0x008E, r24
			gu16_res |= (((uint16_t)ADCH<<8));
    14ec:	e5 e2       	ldi	r30, 0x25	; 37
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	38 2f       	mov	r19, r24
    14f8:	22 27       	eor	r18, r18
    14fa:	80 91 8e 00 	lds	r24, 0x008E
    14fe:	90 91 8f 00 	lds	r25, 0x008F
    1502:	82 2b       	or	r24, r18
    1504:	93 2b       	or	r25, r19
    1506:	90 93 8f 00 	sts	0x008F, r25
    150a:	80 93 8e 00 	sts	0x008E, r24
    150e:	1b c0       	rjmp	.+54     	; 0x1546 <ADC_readChannel+0xdc>
		else if (gu8_conversion == ADC_AUTO_TRIGGER)
		{

		}
	}
	else if (gu8_INT == ADC_INTERRUPT)
    1510:	80 91 91 00 	lds	r24, 0x0091
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	b9 f4       	brne	.+46     	; 0x1546 <ADC_readChannel+0xdc>
	{
		if(gu8_conversion == ADC_START_CONV)
    1518:	80 91 90 00 	lds	r24, 0x0090
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	41 f4       	brne	.+16     	; 0x1530 <ADC_readChannel+0xc6>
		{
			SET_BIT(ADCSRA,ADSC);    /* start conversion write '1' to ADSC */
    1520:	a6 e2       	ldi	r26, 0x26	; 38
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e6 e2       	ldi	r30, 0x26	; 38
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 64       	ori	r24, 0x40	; 64
    152c:	8c 93       	st	X, r24
    152e:	0b c0       	rjmp	.+22     	; 0x1546 <ADC_readChannel+0xdc>
		}
		else if(gu8_conversion == ADC_AUTO_TRIGGER)
    1530:	80 91 90 00 	lds	r24, 0x0090
    1534:	88 23       	and	r24, r24
    1536:	39 f4       	brne	.+14     	; 0x1546 <ADC_readChannel+0xdc>
		{
			Timer_Start(TIMER0,250);
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	4a ef       	ldi	r20, 0xFA	; 250
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer_Start>
		}
	}
}
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1556:	aa e3       	ldi	r26, 0x3A	; 58
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8e 60       	ori	r24, 0x0E	; 14
    1562:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 6f       	ori	r24, 0xF0	; 240
    1570:	8c 93       	st	X, r24

		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1578:	88 e2       	ldi	r24, 0x28	; 40
    157a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	c3 56       	subi	r28, 0x63	; 99
    159e:	d0 40       	sbci	r29, 0x00	; 0
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	fe 01       	movw	r30, r28
    15ac:	ed 59       	subi	r30, 0x9D	; 157
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8b 7f       	andi	r24, 0xFB	; 251
    15cc:	8c 93       	st	X, r24
    15ce:	fe 01       	movw	r30, r28
    15d0:	e1 5a       	subi	r30, 0xA1	; 161
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a0 e8       	ldi	r26, 0x80	; 128
    15da:	bf e3       	ldi	r27, 0x3F	; 63
    15dc:	80 83       	st	Z, r24
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	a2 83       	std	Z+2, r26	; 0x02
    15e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	8e 01       	movw	r16, r28
    15e6:	05 5a       	subi	r16, 0xA5	; 165
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	fe 01       	movw	r30, r28
    15ec:	e1 5a       	subi	r30, 0xA1	; 161
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	80 83       	st	Z, r24
    160c:	91 83       	std	Z+1, r25	; 0x01
    160e:	a2 83       	std	Z+2, r26	; 0x02
    1610:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1612:	fe 01       	movw	r30, r28
    1614:	e5 5a       	subi	r30, 0xA5	; 165
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e8       	ldi	r20, 0x80	; 128
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    162c:	88 23       	and	r24, r24
    162e:	44 f4       	brge	.+16     	; 0x1640 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1630:	fe 01       	movw	r30, r28
    1632:	e7 5a       	subi	r30, 0xA7	; 167
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	64 c0       	rjmp	.+200    	; 0x1708 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1640:	fe 01       	movw	r30, r28
    1642:	e5 5a       	subi	r30, 0xA5	; 165
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	3f ef       	ldi	r19, 0xFF	; 255
    1652:	4f e7       	ldi	r20, 0x7F	; 127
    1654:	57 e4       	ldi	r21, 0x47	; 71
    1656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    165a:	18 16       	cp	r1, r24
    165c:	0c f0       	brlt	.+2      	; 0x1660 <LCD_sendCommand+0xd0>
    165e:	43 c0       	rjmp	.+134    	; 0x16e6 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	fe 01       	movw	r30, r28
    1662:	e1 5a       	subi	r30, 0xA1	; 161
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8e 01       	movw	r16, r28
    1680:	07 5a       	subi	r16, 0xA7	; 167
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	f8 01       	movw	r30, r16
    1692:	91 83       	std	Z+1, r25	; 0x01
    1694:	80 83       	st	Z, r24
    1696:	1f c0       	rjmp	.+62     	; 0x16d6 <LCD_sendCommand+0x146>
    1698:	fe 01       	movw	r30, r28
    169a:	e9 5a       	subi	r30, 0xA9	; 169
    169c:	ff 4f       	sbci	r31, 0xFF	; 255
    169e:	88 ec       	ldi	r24, 0xC8	; 200
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a6:	fe 01       	movw	r30, r28
    16a8:	e9 5a       	subi	r30, 0xA9	; 169
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_sendCommand+0x120>
    16b4:	fe 01       	movw	r30, r28
    16b6:	e9 5a       	subi	r30, 0xA9	; 169
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	de 01       	movw	r26, r28
    16c0:	a7 5a       	subi	r26, 0xA7	; 167
    16c2:	bf 4f       	sbci	r27, 0xFF	; 255
    16c4:	fe 01       	movw	r30, r28
    16c6:	e7 5a       	subi	r30, 0xA7	; 167
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	11 96       	adiw	r26, 0x01	; 1
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	fe 01       	movw	r30, r28
    16d8:	e7 5a       	subi	r30, 0xA7	; 167
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	d1 f6       	brne	.-76     	; 0x1698 <LCD_sendCommand+0x108>
    16e4:	27 c0       	rjmp	.+78     	; 0x1734 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e6:	8e 01       	movw	r16, r28
    16e8:	07 5a       	subi	r16, 0xA7	; 167
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5a       	subi	r30, 0xA5	; 165
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	f8 01       	movw	r30, r16
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
    1708:	de 01       	movw	r26, r28
    170a:	ab 5a       	subi	r26, 0xAB	; 171
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	8d 93       	st	X+, r24
    171a:	9c 93       	st	X, r25
    171c:	fe 01       	movw	r30, r28
    171e:	eb 5a       	subi	r30, 0xAB	; 171
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_sendCommand+0x196>
    172a:	fe 01       	movw	r30, r28
    172c:	eb 5a       	subi	r30, 0xAB	; 171
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1734:	ab e3       	ldi	r26, 0x3B	; 59
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e3       	ldi	r30, 0x3B	; 59
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	88 60       	ori	r24, 0x08	; 8
    1740:	8c 93       	st	X, r24
    1742:	fe 01       	movw	r30, r28
    1744:	ef 5a       	subi	r30, 0xAF	; 175
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e8       	ldi	r26, 0x80	; 128
    174e:	bf e3       	ldi	r27, 0x3F	; 63
    1750:	80 83       	st	Z, r24
    1752:	91 83       	std	Z+1, r25	; 0x01
    1754:	a2 83       	std	Z+2, r26	; 0x02
    1756:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1758:	8e 01       	movw	r16, r28
    175a:	03 5b       	subi	r16, 0xB3	; 179
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	fe 01       	movw	r30, r28
    1760:	ef 5a       	subi	r30, 0xAF	; 175
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a ef       	ldi	r20, 0xFA	; 250
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	f8 01       	movw	r30, r16
    177e:	80 83       	st	Z, r24
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	a2 83       	std	Z+2, r26	; 0x02
    1784:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1786:	fe 01       	movw	r30, r28
    1788:	e3 5b       	subi	r30, 0xB3	; 179
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	60 81       	ld	r22, Z
    178e:	71 81       	ldd	r23, Z+1	; 0x01
    1790:	82 81       	ldd	r24, Z+2	; 0x02
    1792:	93 81       	ldd	r25, Z+3	; 0x03
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	44 f4       	brge	.+16     	; 0x17b4 <LCD_sendCommand+0x224>
		__ticks = 1;
    17a4:	fe 01       	movw	r30, r28
    17a6:	e5 5b       	subi	r30, 0xB5	; 181
    17a8:	ff 4f       	sbci	r31, 0xFF	; 255
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	80 83       	st	Z, r24
    17b2:	64 c0       	rjmp	.+200    	; 0x187c <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 5b       	subi	r30, 0xB3	; 179
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	0c f0       	brlt	.+2      	; 0x17d4 <LCD_sendCommand+0x244>
    17d2:	43 c0       	rjmp	.+134    	; 0x185a <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	fe 01       	movw	r30, r28
    17d6:	ef 5a       	subi	r30, 0xAF	; 175
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	40 e2       	ldi	r20, 0x20	; 32
    17e8:	51 e4       	ldi	r21, 0x41	; 65
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8e 01       	movw	r16, r28
    17f4:	05 5b       	subi	r16, 0xB5	; 181
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	91 83       	std	Z+1, r25	; 0x01
    1808:	80 83       	st	Z, r24
    180a:	1f c0       	rjmp	.+62     	; 0x184a <LCD_sendCommand+0x2ba>
    180c:	fe 01       	movw	r30, r28
    180e:	e7 5b       	subi	r30, 0xB7	; 183
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	88 ec       	ldi	r24, 0xC8	; 200
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	fe 01       	movw	r30, r28
    181c:	e7 5b       	subi	r30, 0xB7	; 183
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <LCD_sendCommand+0x294>
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5b       	subi	r30, 0xB7	; 183
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	de 01       	movw	r26, r28
    1834:	a5 5b       	subi	r26, 0xB5	; 181
    1836:	bf 4f       	sbci	r27, 0xFF	; 255
    1838:	fe 01       	movw	r30, r28
    183a:	e5 5b       	subi	r30, 0xB5	; 181
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	11 96       	adiw	r26, 0x01	; 1
    1846:	9c 93       	st	X, r25
    1848:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	fe 01       	movw	r30, r28
    184c:	e5 5b       	subi	r30, 0xB5	; 181
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	d1 f6       	brne	.-76     	; 0x180c <LCD_sendCommand+0x27c>
    1858:	27 c0       	rjmp	.+78     	; 0x18a8 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185a:	8e 01       	movw	r16, r28
    185c:	05 5b       	subi	r16, 0xB5	; 181
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	fe 01       	movw	r30, r28
    1862:	e3 5b       	subi	r30, 0xB3	; 179
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	f8 01       	movw	r30, r16
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	de 01       	movw	r26, r28
    187e:	a9 5b       	subi	r26, 0xB9	; 185
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e5 5b       	subi	r30, 0xB5	; 181
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	8d 93       	st	X+, r24
    188e:	9c 93       	st	X, r25
    1890:	fe 01       	movw	r30, r28
    1892:	e9 5b       	subi	r30, 0xB9	; 185
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_sendCommand+0x30a>
    189e:	fe 01       	movw	r30, r28
    18a0:	e9 5b       	subi	r30, 0xB9	; 185
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	98 2f       	mov	r25, r24
    18b4:	9f 70       	andi	r25, 0x0F	; 15
    18b6:	fe 01       	movw	r30, r28
    18b8:	ed 59       	subi	r30, 0x9D	; 157
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	80 7f       	andi	r24, 0xF0	; 240
    18c0:	89 2b       	or	r24, r25
    18c2:	8c 93       	st	X, r24
    18c4:	fe 01       	movw	r30, r28
    18c6:	ed 5b       	subi	r30, 0xBD	; 189
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a0 e8       	ldi	r26, 0x80	; 128
    18d0:	bf e3       	ldi	r27, 0x3F	; 63
    18d2:	80 83       	st	Z, r24
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	a2 83       	std	Z+2, r26	; 0x02
    18d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18da:	8e 01       	movw	r16, r28
    18dc:	01 5c       	subi	r16, 0xC1	; 193
    18de:	1f 4f       	sbci	r17, 0xFF	; 255
    18e0:	fe 01       	movw	r30, r28
    18e2:	ed 5b       	subi	r30, 0xBD	; 189
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a ef       	ldi	r20, 0xFA	; 250
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	f8 01       	movw	r30, r16
    1900:	80 83       	st	Z, r24
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	a2 83       	std	Z+2, r26	; 0x02
    1906:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1908:	fe 01       	movw	r30, r28
    190a:	ff 96       	adiw	r30, 0x3f	; 63
    190c:	60 81       	ld	r22, Z
    190e:	71 81       	ldd	r23, Z+1	; 0x01
    1910:	82 81       	ldd	r24, Z+2	; 0x02
    1912:	93 81       	ldd	r25, Z+3	; 0x03
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e8       	ldi	r20, 0x80	; 128
    191a:	5f e3       	ldi	r21, 0x3F	; 63
    191c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1920:	88 23       	and	r24, r24
    1922:	2c f4       	brge	.+10     	; 0x192e <LCD_sendCommand+0x39e>
		__ticks = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	9e af       	std	Y+62, r25	; 0x3e
    192a:	8d af       	std	Y+61, r24	; 0x3d
    192c:	46 c0       	rjmp	.+140    	; 0x19ba <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    192e:	fe 01       	movw	r30, r28
    1930:	ff 96       	adiw	r30, 0x3f	; 63
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	64 f5       	brge	.+88     	; 0x19a2 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	fe 01       	movw	r30, r28
    194c:	ed 5b       	subi	r30, 0xBD	; 189
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e af       	std	Y+62, r25	; 0x3e
    1976:	8d af       	std	Y+61, r24	; 0x3d
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_sendCommand+0x408>
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c af       	std	Y+60, r25	; 0x3c
    1980:	8b af       	std	Y+59, r24	; 0x3b
    1982:	8b ad       	ldd	r24, Y+59	; 0x3b
    1984:	9c ad       	ldd	r25, Y+60	; 0x3c
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_sendCommand+0x3f6>
    198a:	9c af       	std	Y+60, r25	; 0x3c
    198c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1990:	9e ad       	ldd	r25, Y+62	; 0x3e
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9e af       	std	Y+62, r25	; 0x3e
    1996:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8d ad       	ldd	r24, Y+61	; 0x3d
    199a:	9e ad       	ldd	r25, Y+62	; 0x3e
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_sendCommand+0x3ea>
    19a0:	16 c0       	rjmp	.+44     	; 0x19ce <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	fe 01       	movw	r30, r28
    19a4:	ff 96       	adiw	r30, 0x3f	; 63
    19a6:	60 81       	ld	r22, Z
    19a8:	71 81       	ldd	r23, Z+1	; 0x01
    19aa:	82 81       	ldd	r24, Z+2	; 0x02
    19ac:	93 81       	ldd	r25, Z+3	; 0x03
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e af       	std	Y+62, r25	; 0x3e
    19b8:	8d af       	std	Y+61, r24	; 0x3d
    19ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    19bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19be:	9a af       	std	Y+58, r25	; 0x3a
    19c0:	89 af       	std	Y+57, r24	; 0x39
    19c2:	89 ad       	ldd	r24, Y+57	; 0x39
    19c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <LCD_sendCommand+0x436>
    19ca:	9a af       	std	Y+58, r25	; 0x3a
    19cc:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	87 7f       	andi	r24, 0xF7	; 247
    19da:	8c 93       	st	X, r24
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	8d ab       	std	Y+53, r24	; 0x35
    19e6:	9e ab       	std	Y+54, r25	; 0x36
    19e8:	af ab       	std	Y+55, r26	; 0x37
    19ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6d a9       	ldd	r22, Y+53	; 0x35
    19ee:	7e a9       	ldd	r23, Y+54	; 0x36
    19f0:	8f a9       	ldd	r24, Y+55	; 0x37
    19f2:	98 ad       	ldd	r25, Y+56	; 0x38
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a ef       	ldi	r20, 0xFA	; 250
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	89 ab       	std	Y+49, r24	; 0x31
    1a06:	9a ab       	std	Y+50, r25	; 0x32
    1a08:	ab ab       	std	Y+51, r26	; 0x33
    1a0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a10:	8b a9       	ldd	r24, Y+51	; 0x33
    1a12:	9c a9       	ldd	r25, Y+52	; 0x34
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_sendCommand+0x49e>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	98 ab       	std	Y+48, r25	; 0x30
    1a2a:	8f a7       	std	Y+47, r24	; 0x2f
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a30:	7a a9       	ldd	r23, Y+50	; 0x32
    1a32:	8b a9       	ldd	r24, Y+51	; 0x33
    1a34:	9c a9       	ldd	r25, Y+52	; 0x34
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6d a9       	ldd	r22, Y+53	; 0x35
    1a48:	7e a9       	ldd	r23, Y+54	; 0x36
    1a4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	98 ab       	std	Y+48, r25	; 0x30
    1a6c:	8f a7       	std	Y+47, r24	; 0x2f
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_sendCommand+0x4fe>
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9e a7       	std	Y+46, r25	; 0x2e
    1a76:	8d a7       	std	Y+45, r24	; 0x2d
    1a78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_sendCommand+0x4ec>
    1a80:	9e a7       	std	Y+46, r25	; 0x2e
    1a82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a86:	98 a9       	ldd	r25, Y+48	; 0x30
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	98 ab       	std	Y+48, r25	; 0x30
    1a8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a90:	98 a9       	ldd	r25, Y+48	; 0x30
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_sendCommand+0x4e0>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	98 ab       	std	Y+48, r25	; 0x30
    1aaa:	8f a7       	std	Y+47, r24	; 0x2f
    1aac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aae:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab0:	9c a7       	std	Y+44, r25	; 0x2c
    1ab2:	8b a7       	std	Y+43, r24	; 0x2b
    1ab4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_sendCommand+0x528>
    1abc:	9c a7       	std	Y+44, r25	; 0x2c
    1abe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1ac0:	ab e3       	ldi	r26, 0x3B	; 59
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	eb e3       	ldi	r30, 0x3B	; 59
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	88 60       	ori	r24, 0x08	; 8
    1acc:	8c 93       	st	X, r24
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e8       	ldi	r26, 0x80	; 128
    1ad4:	bf e3       	ldi	r27, 0x3F	; 63
    1ad6:	8f a3       	std	Y+39, r24	; 0x27
    1ad8:	98 a7       	std	Y+40, r25	; 0x28
    1ada:	a9 a7       	std	Y+41, r26	; 0x29
    1adc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a ef       	ldi	r20, 0xFA	; 250
    1aec:	54 e4       	ldi	r21, 0x44	; 68
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8b a3       	std	Y+35, r24	; 0x23
    1af8:	9c a3       	std	Y+36, r25	; 0x24
    1afa:	ad a3       	std	Y+37, r26	; 0x25
    1afc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1afe:	6b a1       	ldd	r22, Y+35	; 0x23
    1b00:	7c a1       	ldd	r23, Y+36	; 0x24
    1b02:	8d a1       	ldd	r24, Y+37	; 0x25
    1b04:	9e a1       	ldd	r25, Y+38	; 0x26
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_sendCommand+0x590>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9a a3       	std	Y+34, r25	; 0x22
    1b1c:	89 a3       	std	Y+33, r24	; 0x21
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1b20:	6b a1       	ldd	r22, Y+35	; 0x23
    1b22:	7c a1       	ldd	r23, Y+36	; 0x24
    1b24:	8d a1       	ldd	r24, Y+37	; 0x25
    1b26:	9e a1       	ldd	r25, Y+38	; 0x26
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	6f a1       	ldd	r22, Y+39	; 0x27
    1b3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9a a3       	std	Y+34, r25	; 0x22
    1b5e:	89 a3       	std	Y+33, r24	; 0x21
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <LCD_sendCommand+0x5f0>
    1b62:	88 ec       	ldi	r24, 0xC8	; 200
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
    1b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b6c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_sendCommand+0x5de>
    1b72:	98 a3       	std	Y+32, r25	; 0x20
    1b74:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	89 a1       	ldd	r24, Y+33	; 0x21
    1b78:	9a a1       	ldd	r25, Y+34	; 0x22
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9a a3       	std	Y+34, r25	; 0x22
    1b7e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	89 a1       	ldd	r24, Y+33	; 0x21
    1b82:	9a a1       	ldd	r25, Y+34	; 0x22
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <LCD_sendCommand+0x5d2>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b90:	9e a1       	ldd	r25, Y+38	; 0x26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9a a3       	std	Y+34, r25	; 0x22
    1b9c:	89 a3       	std	Y+33, r24	; 0x21
    1b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ba8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_sendCommand+0x61a>
    1bae:	9e 8f       	std	Y+30, r25	; 0x1e
    1bb0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	2f 70       	andi	r18, 0x0F	; 15
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	ed 59       	subi	r30, 0x9D	; 157
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	82 95       	swap	r24
    1bce:	92 95       	swap	r25
    1bd0:	90 7f       	andi	r25, 0xF0	; 240
    1bd2:	98 27       	eor	r25, r24
    1bd4:	80 7f       	andi	r24, 0xF0	; 240
    1bd6:	98 27       	eor	r25, r24
    1bd8:	82 2b       	or	r24, r18
    1bda:	8c 93       	st	X, r24
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a0 e8       	ldi	r26, 0x80	; 128
    1be2:	bf e3       	ldi	r27, 0x3F	; 63
    1be4:	89 8f       	std	Y+25, r24	; 0x19
    1be6:	9a 8f       	std	Y+26, r25	; 0x1a
    1be8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	69 8d       	ldd	r22, Y+25	; 0x19
    1bee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a ef       	ldi	r20, 0xFA	; 250
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8d 8b       	std	Y+21, r24	; 0x15
    1c06:	9e 8b       	std	Y+22, r25	; 0x16
    1c08:	af 8b       	std	Y+23, r26	; 0x17
    1c0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c10:	8f 89       	ldd	r24, Y+23	; 0x17
    1c12:	98 8d       	ldd	r25, Y+24	; 0x18
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <LCD_sendCommand+0x69e>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9c 8b       	std	Y+20, r25	; 0x14
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	69 8d       	ldd	r22, Y+25	; 0x19
    1c48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9c 8b       	std	Y+20, r25	; 0x14
    1c6c:	8b 8b       	std	Y+19, r24	; 0x13
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <LCD_sendCommand+0x6fe>
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9a 8b       	std	Y+18, r25	; 0x12
    1c76:	89 8b       	std	Y+17, r24	; 0x11
    1c78:	89 89       	ldd	r24, Y+17	; 0x11
    1c7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <LCD_sendCommand+0x6ec>
    1c80:	9a 8b       	std	Y+18, r25	; 0x12
    1c82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8b 89       	ldd	r24, Y+19	; 0x13
    1c86:	9c 89       	ldd	r25, Y+20	; 0x14
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	9c 8b       	std	Y+20, r25	; 0x14
    1c8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c90:	9c 89       	ldd	r25, Y+20	; 0x14
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <LCD_sendCommand+0x6e0>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	98 8b       	std	Y+16, r25	; 0x10
    1cb2:	8f 87       	std	Y+15, r24	; 0x0f
    1cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb6:	98 89       	ldd	r25, Y+16	; 0x10
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_sendCommand+0x728>
    1cbc:	98 8b       	std	Y+16, r25	; 0x10
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1cc0:	ab e3       	ldi	r26, 0x3B	; 59
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 7f       	andi	r24, 0xF7	; 247
    1ccc:	8c 93       	st	X, r24
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	a0 e8       	ldi	r26, 0x80	; 128
    1cd4:	bf e3       	ldi	r27, 0x3F	; 63
    1cd6:	8b 87       	std	Y+11, r24	; 0x0b
    1cd8:	9c 87       	std	Y+12, r25	; 0x0c
    1cda:	ad 87       	std	Y+13, r26	; 0x0d
    1cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8f 83       	std	Y+7, r24	; 0x07
    1cf8:	98 87       	std	Y+8, r25	; 0x08
    1cfa:	a9 87       	std	Y+9, r26	; 0x09
    1cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <LCD_sendCommand+0x790>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9e 83       	std	Y+6, r25	; 0x06
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <LCD_sendCommand+0x7f0>
    1d62:	88 ec       	ldi	r24, 0xC8	; 200
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x7de>
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <LCD_sendCommand+0x7d2>
    1d88:	14 c0       	rjmp	.+40     	; 0x1db2 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8c:	78 85       	ldd	r23, Y+8	; 0x08
    1d8e:	89 85       	ldd	r24, Y+9	; 0x09
    1d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	9e 81       	ldd	r25, Y+6	; 0x06
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	9a 81       	ldd	r25, Y+2	; 0x02
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_sendCommand+0x81a>
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1db2:	cd 59       	subi	r28, 0x9D	; 157
    1db4:	df 4f       	sbci	r29, 0xFF	; 255
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	c3 56       	subi	r28, 0x63	; 99
    1dd8:	d0 40       	sbci	r29, 0x00	; 0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	fe 01       	movw	r30, r28
    1de6:	ed 59       	subi	r30, 0x9D	; 157
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1dec:	ab e3       	ldi	r26, 0x3B	; 59
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e3       	ldi	r30, 0x3B	; 59
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	82 60       	ori	r24, 0x02	; 2
    1df8:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	eb e3       	ldi	r30, 0x3B	; 59
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8b 7f       	andi	r24, 0xFB	; 251
    1e06:	8c 93       	st	X, r24
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e1 5a       	subi	r30, 0xA1	; 161
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	bf e3       	ldi	r27, 0x3F	; 63
    1e16:	80 83       	st	Z, r24
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	a2 83       	std	Z+2, r26	; 0x02
    1e1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	8e 01       	movw	r16, r28
    1e20:	05 5a       	subi	r16, 0xA5	; 165
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	fe 01       	movw	r30, r28
    1e26:	e1 5a       	subi	r30, 0xA1	; 161
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	60 81       	ld	r22, Z
    1e2c:	71 81       	ldd	r23, Z+1	; 0x01
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	f8 01       	movw	r30, r16
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	a2 83       	std	Z+2, r26	; 0x02
    1e4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e5 5a       	subi	r30, 0xA5	; 165
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	60 81       	ld	r22, Z
    1e54:	71 81       	ldd	r23, Z+1	; 0x01
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	93 81       	ldd	r25, Z+3	; 0x03
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e8       	ldi	r20, 0x80	; 128
    1e60:	5f e3       	ldi	r21, 0x3F	; 63
    1e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	44 f4       	brge	.+16     	; 0x1e7a <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e7 5a       	subi	r30, 0xA7	; 167
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	80 83       	st	Z, r24
    1e78:	64 c0       	rjmp	.+200    	; 0x1f42 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e5 5a       	subi	r30, 0xA5	; 165
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	3f ef       	ldi	r19, 0xFF	; 255
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	57 e4       	ldi	r21, 0x47	; 71
    1e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e94:	18 16       	cp	r1, r24
    1e96:	0c f0       	brlt	.+2      	; 0x1e9a <LCD_displayCharacter+0xd0>
    1e98:	43 c0       	rjmp	.+134    	; 0x1f20 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e1 5a       	subi	r30, 0xA1	; 161
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e2       	ldi	r20, 0x20	; 32
    1eae:	51 e4       	ldi	r21, 0x41	; 65
    1eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8e 01       	movw	r16, r28
    1eba:	07 5a       	subi	r16, 0xA7	; 167
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	1f c0       	rjmp	.+62     	; 0x1f10 <LCD_displayCharacter+0x146>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e9 5a       	subi	r30, 0xA9	; 169
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e9 5a       	subi	r30, 0xA9	; 169
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	91 81       	ldd	r25, Z+1	; 0x01
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <LCD_displayCharacter+0x120>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e9 5a       	subi	r30, 0xA9	; 169
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	de 01       	movw	r26, r28
    1efa:	a7 5a       	subi	r26, 0xA7	; 167
    1efc:	bf 4f       	sbci	r27, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 5a       	subi	r30, 0xA7	; 167
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	11 96       	adiw	r26, 0x01	; 1
    1f0c:	9c 93       	st	X, r25
    1f0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	fe 01       	movw	r30, r28
    1f12:	e7 5a       	subi	r30, 0xA7	; 167
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	91 81       	ldd	r25, Z+1	; 0x01
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	d1 f6       	brne	.-76     	; 0x1ed2 <LCD_displayCharacter+0x108>
    1f1e:	27 c0       	rjmp	.+78     	; 0x1f6e <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	8e 01       	movw	r16, r28
    1f22:	07 5a       	subi	r16, 0xA7	; 167
    1f24:	1f 4f       	sbci	r17, 0xFF	; 255
    1f26:	fe 01       	movw	r30, r28
    1f28:	e5 5a       	subi	r30, 0xA5	; 165
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	f8 01       	movw	r30, r16
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	80 83       	st	Z, r24
    1f42:	de 01       	movw	r26, r28
    1f44:	ab 5a       	subi	r26, 0xAB	; 171
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e7 5a       	subi	r30, 0xA7	; 167
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	80 81       	ld	r24, Z
    1f50:	91 81       	ldd	r25, Z+1	; 0x01
    1f52:	8d 93       	st	X+, r24
    1f54:	9c 93       	st	X, r25
    1f56:	fe 01       	movw	r30, r28
    1f58:	eb 5a       	subi	r30, 0xAB	; 171
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_displayCharacter+0x196>
    1f64:	fe 01       	movw	r30, r28
    1f66:	eb 5a       	subi	r30, 0xAB	; 171
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	91 83       	std	Z+1, r25	; 0x01
    1f6c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1f6e:	ab e3       	ldi	r26, 0x3B	; 59
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	88 60       	ori	r24, 0x08	; 8
    1f7a:	8c 93       	st	X, r24
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ef 5a       	subi	r30, 0xAF	; 175
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e8       	ldi	r26, 0x80	; 128
    1f88:	bf e3       	ldi	r27, 0x3F	; 63
    1f8a:	80 83       	st	Z, r24
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	a2 83       	std	Z+2, r26	; 0x02
    1f90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	8e 01       	movw	r16, r28
    1f94:	03 5b       	subi	r16, 0xB3	; 179
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ef 5a       	subi	r30, 0xAF	; 175
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	4a ef       	ldi	r20, 0xFA	; 250
    1fac:	54 e4       	ldi	r21, 0x44	; 68
    1fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	80 83       	st	Z, r24
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	a2 83       	std	Z+2, r26	; 0x02
    1fbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e3 5b       	subi	r30, 0xB3	; 179
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	44 f4       	brge	.+16     	; 0x1fee <LCD_displayCharacter+0x224>
		__ticks = 1;
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e5 5b       	subi	r30, 0xB5	; 181
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	64 c0       	rjmp	.+200    	; 0x20b6 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e3 5b       	subi	r30, 0xB3	; 179
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	60 81       	ld	r22, Z
    1ff6:	71 81       	ldd	r23, Z+1	; 0x01
    1ff8:	82 81       	ldd	r24, Z+2	; 0x02
    1ffa:	93 81       	ldd	r25, Z+3	; 0x03
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	4f e7       	ldi	r20, 0x7F	; 127
    2002:	57 e4       	ldi	r21, 0x47	; 71
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2008:	18 16       	cp	r1, r24
    200a:	0c f0       	brlt	.+2      	; 0x200e <LCD_displayCharacter+0x244>
    200c:	43 c0       	rjmp	.+134    	; 0x2094 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200e:	fe 01       	movw	r30, r28
    2010:	ef 5a       	subi	r30, 0xAF	; 175
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8e 01       	movw	r16, r28
    202e:	05 5b       	subi	r16, 0xB5	; 181
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	f8 01       	movw	r30, r16
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
    2044:	1f c0       	rjmp	.+62     	; 0x2084 <LCD_displayCharacter+0x2ba>
    2046:	fe 01       	movw	r30, r28
    2048:	e7 5b       	subi	r30, 0xB7	; 183
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	fe 01       	movw	r30, r28
    2056:	e7 5b       	subi	r30, 0xB7	; 183
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_displayCharacter+0x294>
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5b       	subi	r30, 0xB7	; 183
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	de 01       	movw	r26, r28
    206e:	a5 5b       	subi	r26, 0xB5	; 181
    2070:	bf 4f       	sbci	r27, 0xFF	; 255
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5b       	subi	r30, 0xB5	; 181
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	11 96       	adiw	r26, 0x01	; 1
    2080:	9c 93       	st	X, r25
    2082:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	fe 01       	movw	r30, r28
    2086:	e5 5b       	subi	r30, 0xB5	; 181
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	80 81       	ld	r24, Z
    208c:	91 81       	ldd	r25, Z+1	; 0x01
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	d1 f6       	brne	.-76     	; 0x2046 <LCD_displayCharacter+0x27c>
    2092:	27 c0       	rjmp	.+78     	; 0x20e2 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	8e 01       	movw	r16, r28
    2096:	05 5b       	subi	r16, 0xB5	; 181
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	fe 01       	movw	r30, r28
    209c:	e3 5b       	subi	r30, 0xB3	; 179
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	60 81       	ld	r22, Z
    20a2:	71 81       	ldd	r23, Z+1	; 0x01
    20a4:	82 81       	ldd	r24, Z+2	; 0x02
    20a6:	93 81       	ldd	r25, Z+3	; 0x03
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	f8 01       	movw	r30, r16
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	de 01       	movw	r26, r28
    20b8:	a9 5b       	subi	r26, 0xB9	; 185
    20ba:	bf 4f       	sbci	r27, 0xFF	; 255
    20bc:	fe 01       	movw	r30, r28
    20be:	e5 5b       	subi	r30, 0xB5	; 181
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	8d 93       	st	X+, r24
    20c8:	9c 93       	st	X, r25
    20ca:	fe 01       	movw	r30, r28
    20cc:	e9 5b       	subi	r30, 0xB9	; 185
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	80 81       	ld	r24, Z
    20d2:	91 81       	ldd	r25, Z+1	; 0x01
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <LCD_displayCharacter+0x30a>
    20d8:	fe 01       	movw	r30, r28
    20da:	e9 5b       	subi	r30, 0xB9	; 185
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    20e2:	ab e3       	ldi	r26, 0x3B	; 59
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	eb e3       	ldi	r30, 0x3B	; 59
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	98 2f       	mov	r25, r24
    20ee:	9f 70       	andi	r25, 0x0F	; 15
    20f0:	fe 01       	movw	r30, r28
    20f2:	ed 59       	subi	r30, 0x9D	; 157
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	80 7f       	andi	r24, 0xF0	; 240
    20fa:	89 2b       	or	r24, r25
    20fc:	8c 93       	st	X, r24
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 5b       	subi	r30, 0xBD	; 189
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	80 83       	st	Z, r24
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	a2 83       	std	Z+2, r26	; 0x02
    2112:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	8e 01       	movw	r16, r28
    2116:	01 5c       	subi	r16, 0xC1	; 193
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	fe 01       	movw	r30, r28
    211c:	ed 5b       	subi	r30, 0xBD	; 189
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a ef       	ldi	r20, 0xFA	; 250
    212e:	54 e4       	ldi	r21, 0x44	; 68
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	f8 01       	movw	r30, r16
    213a:	80 83       	st	Z, r24
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	a2 83       	std	Z+2, r26	; 0x02
    2140:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2142:	fe 01       	movw	r30, r28
    2144:	ff 96       	adiw	r30, 0x3f	; 63
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9e af       	std	Y+62, r25	; 0x3e
    2164:	8d af       	std	Y+61, r24	; 0x3d
    2166:	46 c0       	rjmp	.+140    	; 0x21f4 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2168:	fe 01       	movw	r30, r28
    216a:	ff 96       	adiw	r30, 0x3f	; 63
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	64 f5       	brge	.+88     	; 0x21dc <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	fe 01       	movw	r30, r28
    2186:	ed 5b       	subi	r30, 0xBD	; 189
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9e af       	std	Y+62, r25	; 0x3e
    21b0:	8d af       	std	Y+61, r24	; 0x3d
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_displayCharacter+0x408>
    21b4:	88 ec       	ldi	r24, 0xC8	; 200
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9c af       	std	Y+60, r25	; 0x3c
    21ba:	8b af       	std	Y+59, r24	; 0x3b
    21bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    21be:	9c ad       	ldd	r25, Y+60	; 0x3c
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_displayCharacter+0x3f6>
    21c4:	9c af       	std	Y+60, r25	; 0x3c
    21c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9e af       	std	Y+62, r25	; 0x3e
    21d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_displayCharacter+0x3ea>
    21da:	16 c0       	rjmp	.+44     	; 0x2208 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	fe 01       	movw	r30, r28
    21de:	ff 96       	adiw	r30, 0x3f	; 63
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	9e af       	std	Y+62, r25	; 0x3e
    21f2:	8d af       	std	Y+61, r24	; 0x3d
    21f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f8:	9a af       	std	Y+58, r25	; 0x3a
    21fa:	89 af       	std	Y+57, r24	; 0x39
    21fc:	89 ad       	ldd	r24, Y+57	; 0x39
    21fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_displayCharacter+0x436>
    2204:	9a af       	std	Y+58, r25	; 0x3a
    2206:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2208:	ab e3       	ldi	r26, 0x3B	; 59
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	eb e3       	ldi	r30, 0x3B	; 59
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	87 7f       	andi	r24, 0xF7	; 247
    2214:	8c 93       	st	X, r24
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	8d ab       	std	Y+53, r24	; 0x35
    2220:	9e ab       	std	Y+54, r25	; 0x36
    2222:	af ab       	std	Y+55, r26	; 0x37
    2224:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	6d a9       	ldd	r22, Y+53	; 0x35
    2228:	7e a9       	ldd	r23, Y+54	; 0x36
    222a:	8f a9       	ldd	r24, Y+55	; 0x37
    222c:	98 ad       	ldd	r25, Y+56	; 0x38
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	89 ab       	std	Y+49, r24	; 0x31
    2240:	9a ab       	std	Y+50, r25	; 0x32
    2242:	ab ab       	std	Y+51, r26	; 0x33
    2244:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2246:	69 a9       	ldd	r22, Y+49	; 0x31
    2248:	7a a9       	ldd	r23, Y+50	; 0x32
    224a:	8b a9       	ldd	r24, Y+51	; 0x33
    224c:	9c a9       	ldd	r25, Y+52	; 0x34
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	98 ab       	std	Y+48, r25	; 0x30
    2264:	8f a7       	std	Y+47, r24	; 0x2f
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2268:	69 a9       	ldd	r22, Y+49	; 0x31
    226a:	7a a9       	ldd	r23, Y+50	; 0x32
    226c:	8b a9       	ldd	r24, Y+51	; 0x33
    226e:	9c a9       	ldd	r25, Y+52	; 0x34
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	6d a9       	ldd	r22, Y+53	; 0x35
    2282:	7e a9       	ldd	r23, Y+54	; 0x36
    2284:	8f a9       	ldd	r24, Y+55	; 0x37
    2286:	98 ad       	ldd	r25, Y+56	; 0x38
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	98 ab       	std	Y+48, r25	; 0x30
    22a6:	8f a7       	std	Y+47, r24	; 0x2f
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <LCD_displayCharacter+0x4fe>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9e a7       	std	Y+46, r25	; 0x2e
    22b0:	8d a7       	std	Y+45, r24	; 0x2d
    22b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_displayCharacter+0x4ec>
    22ba:	9e a7       	std	Y+46, r25	; 0x2e
    22bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c0:	98 a9       	ldd	r25, Y+48	; 0x30
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	98 ab       	std	Y+48, r25	; 0x30
    22c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ca:	98 a9       	ldd	r25, Y+48	; 0x30
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <LCD_displayCharacter+0x4e0>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	69 a9       	ldd	r22, Y+49	; 0x31
    22d4:	7a a9       	ldd	r23, Y+50	; 0x32
    22d6:	8b a9       	ldd	r24, Y+51	; 0x33
    22d8:	9c a9       	ldd	r25, Y+52	; 0x34
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	98 ab       	std	Y+48, r25	; 0x30
    22e4:	8f a7       	std	Y+47, r24	; 0x2f
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	9c a7       	std	Y+44, r25	; 0x2c
    22ec:	8b a7       	std	Y+43, r24	; 0x2b
    22ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_displayCharacter+0x528>
    22f6:	9c a7       	std	Y+44, r25	; 0x2c
    22f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    22fa:	ab e3       	ldi	r26, 0x3B	; 59
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	eb e3       	ldi	r30, 0x3B	; 59
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	88 60       	ori	r24, 0x08	; 8
    2306:	8c 93       	st	X, r24
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	a0 e8       	ldi	r26, 0x80	; 128
    230e:	bf e3       	ldi	r27, 0x3F	; 63
    2310:	8f a3       	std	Y+39, r24	; 0x27
    2312:	98 a7       	std	Y+40, r25	; 0x28
    2314:	a9 a7       	std	Y+41, r26	; 0x29
    2316:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2318:	6f a1       	ldd	r22, Y+39	; 0x27
    231a:	78 a5       	ldd	r23, Y+40	; 0x28
    231c:	89 a5       	ldd	r24, Y+41	; 0x29
    231e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	4a ef       	ldi	r20, 0xFA	; 250
    2326:	54 e4       	ldi	r21, 0x44	; 68
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8b a3       	std	Y+35, r24	; 0x23
    2332:	9c a3       	std	Y+36, r25	; 0x24
    2334:	ad a3       	std	Y+37, r26	; 0x25
    2336:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2338:	6b a1       	ldd	r22, Y+35	; 0x23
    233a:	7c a1       	ldd	r23, Y+36	; 0x24
    233c:	8d a1       	ldd	r24, Y+37	; 0x25
    233e:	9e a1       	ldd	r25, Y+38	; 0x26
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	40 e8       	ldi	r20, 0x80	; 128
    2346:	5f e3       	ldi	r21, 0x3F	; 63
    2348:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234c:	88 23       	and	r24, r24
    234e:	2c f4       	brge	.+10     	; 0x235a <LCD_displayCharacter+0x590>
		__ticks = 1;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
    2358:	3f c0       	rjmp	.+126    	; 0x23d8 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    235a:	6b a1       	ldd	r22, Y+35	; 0x23
    235c:	7c a1       	ldd	r23, Y+36	; 0x24
    235e:	8d a1       	ldd	r24, Y+37	; 0x25
    2360:	9e a1       	ldd	r25, Y+38	; 0x26
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	3f ef       	ldi	r19, 0xFF	; 255
    2366:	4f e7       	ldi	r20, 0x7F	; 127
    2368:	57 e4       	ldi	r21, 0x47	; 71
    236a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    236e:	18 16       	cp	r1, r24
    2370:	4c f5       	brge	.+82     	; 0x23c4 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2372:	6f a1       	ldd	r22, Y+39	; 0x27
    2374:	78 a5       	ldd	r23, Y+40	; 0x28
    2376:	89 a5       	ldd	r24, Y+41	; 0x29
    2378:	9a a5       	ldd	r25, Y+42	; 0x2a
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e2       	ldi	r20, 0x20	; 32
    2380:	51 e4       	ldi	r21, 0x41	; 65
    2382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9a a3       	std	Y+34, r25	; 0x22
    2398:	89 a3       	std	Y+33, r24	; 0x21
    239a:	0f c0       	rjmp	.+30     	; 0x23ba <LCD_displayCharacter+0x5f0>
    239c:	88 ec       	ldi	r24, 0xC8	; 200
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	98 a3       	std	Y+32, r25	; 0x20
    23a2:	8f 8f       	std	Y+31, r24	; 0x1f
    23a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a6:	98 a1       	ldd	r25, Y+32	; 0x20
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_displayCharacter+0x5de>
    23ac:	98 a3       	std	Y+32, r25	; 0x20
    23ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b0:	89 a1       	ldd	r24, Y+33	; 0x21
    23b2:	9a a1       	ldd	r25, Y+34	; 0x22
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	9a a3       	std	Y+34, r25	; 0x22
    23b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	89 a1       	ldd	r24, Y+33	; 0x21
    23bc:	9a a1       	ldd	r25, Y+34	; 0x22
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f7       	brne	.-38     	; 0x239c <LCD_displayCharacter+0x5d2>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9a a3       	std	Y+34, r25	; 0x22
    23d6:	89 a3       	std	Y+33, r24	; 0x21
    23d8:	89 a1       	ldd	r24, Y+33	; 0x21
    23da:	9a a1       	ldd	r25, Y+34	; 0x22
    23dc:	9e 8f       	std	Y+30, r25	; 0x1e
    23de:	8d 8f       	std	Y+29, r24	; 0x1d
    23e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_displayCharacter+0x61a>
    23e8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    23ec:	ab e3       	ldi	r26, 0x3B	; 59
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	eb e3       	ldi	r30, 0x3B	; 59
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	28 2f       	mov	r18, r24
    23f8:	2f 70       	andi	r18, 0x0F	; 15
    23fa:	fe 01       	movw	r30, r28
    23fc:	ed 59       	subi	r30, 0x9D	; 157
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	82 95       	swap	r24
    2408:	92 95       	swap	r25
    240a:	90 7f       	andi	r25, 0xF0	; 240
    240c:	98 27       	eor	r25, r24
    240e:	80 7f       	andi	r24, 0xF0	; 240
    2410:	98 27       	eor	r25, r24
    2412:	82 2b       	or	r24, r18
    2414:	8c 93       	st	X, r24
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e8       	ldi	r26, 0x80	; 128
    241c:	bf e3       	ldi	r27, 0x3F	; 63
    241e:	89 8f       	std	Y+25, r24	; 0x19
    2420:	9a 8f       	std	Y+26, r25	; 0x1a
    2422:	ab 8f       	std	Y+27, r26	; 0x1b
    2424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	69 8d       	ldd	r22, Y+25	; 0x19
    2428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	4a ef       	ldi	r20, 0xFA	; 250
    2434:	54 e4       	ldi	r21, 0x44	; 68
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8d 8b       	std	Y+21, r24	; 0x15
    2440:	9e 8b       	std	Y+22, r25	; 0x16
    2442:	af 8b       	std	Y+23, r26	; 0x17
    2444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2446:	6d 89       	ldd	r22, Y+21	; 0x15
    2448:	7e 89       	ldd	r23, Y+22	; 0x16
    244a:	8f 89       	ldd	r24, Y+23	; 0x17
    244c:	98 8d       	ldd	r25, Y+24	; 0x18
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e8       	ldi	r20, 0x80	; 128
    2454:	5f e3       	ldi	r21, 0x3F	; 63
    2456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245a:	88 23       	and	r24, r24
    245c:	2c f4       	brge	.+10     	; 0x2468 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	3f ef       	ldi	r19, 0xFF	; 255
    2474:	4f e7       	ldi	r20, 0x7F	; 127
    2476:	57 e4       	ldi	r21, 0x47	; 71
    2478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247c:	18 16       	cp	r1, r24
    247e:	4c f5       	brge	.+82     	; 0x24d2 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2480:	69 8d       	ldd	r22, Y+25	; 0x19
    2482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e2       	ldi	r20, 0x20	; 32
    248e:	51 e4       	ldi	r21, 0x41	; 65
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9c 8b       	std	Y+20, r25	; 0x14
    24a6:	8b 8b       	std	Y+19, r24	; 0x13
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <LCD_displayCharacter+0x6fe>
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a 8b       	std	Y+18, r25	; 0x12
    24b0:	89 8b       	std	Y+17, r24	; 0x11
    24b2:	89 89       	ldd	r24, Y+17	; 0x11
    24b4:	9a 89       	ldd	r25, Y+18	; 0x12
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <LCD_displayCharacter+0x6ec>
    24ba:	9a 8b       	std	Y+18, r25	; 0x12
    24bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24be:	8b 89       	ldd	r24, Y+19	; 0x13
    24c0:	9c 89       	ldd	r25, Y+20	; 0x14
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	9c 8b       	std	Y+20, r25	; 0x14
    24c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ca:	9c 89       	ldd	r25, Y+20	; 0x14
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	69 f7       	brne	.-38     	; 0x24aa <LCD_displayCharacter+0x6e0>
    24d0:	14 c0       	rjmp	.+40     	; 0x24fa <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	8b 89       	ldd	r24, Y+19	; 0x13
    24e8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ea:	98 8b       	std	Y+16, r25	; 0x10
    24ec:	8f 87       	std	Y+15, r24	; 0x0f
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	98 89       	ldd	r25, Y+16	; 0x10
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_displayCharacter+0x728>
    24f6:	98 8b       	std	Y+16, r25	; 0x10
    24f8:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    24fa:	ab e3       	ldi	r26, 0x3B	; 59
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	eb e3       	ldi	r30, 0x3B	; 59
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	87 7f       	andi	r24, 0xF7	; 247
    2506:	8c 93       	st	X, r24
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e8       	ldi	r26, 0x80	; 128
    250e:	bf e3       	ldi	r27, 0x3F	; 63
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a ef       	ldi	r20, 0xFA	; 250
    2526:	54 e4       	ldi	r21, 0x44	; 68
    2528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_displayCharacter+0x790>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_displayCharacter+0x7f0>
    259c:	88 ec       	ldi	r24, 0xC8	; 200
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0x7de>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <LCD_displayCharacter+0x7d2>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_displayCharacter+0x81a>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25ec:	cd 59       	subi	r28, 0x9D	; 157
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <LCD_displayString+0x6>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    2614:	19 82       	std	Y+1, r1	; 0x01
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	80 81       	ld	r24, Z
    262a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_displayCharacter>
		i++;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	39 f7       	brne	.-50     	; 0x2618 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	00 d0       	rcall	.+0      	; 0x265c <LCD_goToRowColumn+0x6>
    265c:	00 d0       	rcall	.+0      	; 0x265e <LCD_goToRowColumn+0x8>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;

	/* first of all calculate the required address */
	switch(row)
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3d 83       	std	Y+5, r19	; 0x05
    2670:	2c 83       	std	Y+4, r18	; 0x04
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	91 05       	cpc	r25, r1
    267a:	c1 f0       	breq	.+48     	; 0x26ac <LCD_goToRowColumn+0x56>
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	22 30       	cpi	r18, 0x02	; 2
    2682:	31 05       	cpc	r19, r1
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_goToRowColumn+0x3a>
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	61 f0       	breq	.+24     	; 0x26a6 <LCD_goToRowColumn+0x50>
    268e:	19 c0       	rjmp	.+50     	; 0x26c2 <LCD_goToRowColumn+0x6c>
    2690:	2c 81       	ldd	r18, Y+4	; 0x04
    2692:	3d 81       	ldd	r19, Y+5	; 0x05
    2694:	22 30       	cpi	r18, 0x02	; 2
    2696:	31 05       	cpc	r19, r1
    2698:	69 f0       	breq	.+26     	; 0x26b4 <LCD_goToRowColumn+0x5e>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	61 f0       	breq	.+24     	; 0x26bc <LCD_goToRowColumn+0x66>
    26a4:	0e c0       	rjmp	.+28     	; 0x26c2 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	0b c0       	rjmp	.+22     	; 0x26c2 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	80 5c       	subi	r24, 0xC0	; 192
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	80 5f       	subi	r24, 0xF0	; 240
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 5b       	subi	r24, 0xB0	; 176
    26c0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	80 68       	ori	r24, 0x80	; 128
    26c6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <LCD_displayStringRowColumn+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_displayStringRowColumn+0x8>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	6a 83       	std	Y+2, r22	; 0x02
    26ea:	5c 83       	std	Y+4, r21	; 0x04
    26ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	6a 81       	ldd	r22, Y+2	; 0x02
    26f2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	62 97       	sbiw	r28, 0x12	; 18
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	9e 01       	movw	r18, r28
    272a:	2f 5f       	subi	r18, 0xFF	; 255
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	b9 01       	movw	r22, r18
    2730:	4a e0       	ldi	r20, 0x0A	; 10
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	0e 94 08 15 	call	0x2a10	; 0x2a10 <itoa>
   LCD_displayString(buff);
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>
}
    2740:	62 96       	adiw	r28, 0x12	; 18
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <__vector_16>:
uint8_t gu8_no=0;
void __vector_16(void)__attribute__((signal,used,externally_visible));
void __vector_10(void)__attribute__((signal,used,externally_visible));

void __vector_16()
{
    2766:	1f 92       	push	r1
    2768:	0f 92       	push	r0
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	0f 92       	push	r0
    276e:	11 24       	eor	r1, r1
    2770:	2f 93       	push	r18
    2772:	3f 93       	push	r19
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	gu16_res = (uint16_t)ADCL;
    2784:	e4 e2       	ldi	r30, 0x24	; 36
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	90 93 8f 00 	sts	0x008F, r25
    2792:	80 93 8e 00 	sts	0x008E, r24
	gu16_res |= (uint16_t)(ADCH<<8);
    2796:	e5 e2       	ldi	r30, 0x25	; 37
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	98 2f       	mov	r25, r24
    27a2:	88 27       	eor	r24, r24
    27a4:	9c 01       	movw	r18, r24
    27a6:	80 91 8e 00 	lds	r24, 0x008E
    27aa:	90 91 8f 00 	lds	r25, 0x008F
    27ae:	82 2b       	or	r24, r18
    27b0:	93 2b       	or	r25, r19
    27b2:	90 93 8f 00 	sts	0x008F, r25
    27b6:	80 93 8e 00 	sts	0x008E, r24
}
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	ff 91       	pop	r31
    27c0:	ef 91       	pop	r30
    27c2:	9f 91       	pop	r25
    27c4:	8f 91       	pop	r24
    27c6:	3f 91       	pop	r19
    27c8:	2f 91       	pop	r18
    27ca:	0f 90       	pop	r0
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	0f 90       	pop	r0
    27d0:	1f 90       	pop	r1
    27d2:	18 95       	reti

000027d4 <__vector_10>:

void __vector_10()
{
    27d4:	1f 92       	push	r1
    27d6:	0f 92       	push	r0
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	0f 92       	push	r0
    27dc:	11 24       	eor	r1, r1
    27de:	2f 93       	push	r18
    27e0:	3f 93       	push	r19
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	gu8_no++;
    27f2:	80 91 92 00 	lds	r24, 0x0092
    27f6:	8f 5f       	subi	r24, 0xFF	; 255
    27f8:	80 93 92 00 	sts	0x0092, r24
	if (gu8_no == NO_OF_OVERFLOWS)
    27fc:	80 91 92 00 	lds	r24, 0x0092
    2800:	8f 31       	cpi	r24, 0x1F	; 31
    2802:	e9 f4       	brne	.+58     	; 0x283e <__vector_10+0x6a>
	{
		/* Read ADC Data after conversion complete */
		gu16_res = (uint16_t)ADCL;
    2804:	e4 e2       	ldi	r30, 0x24	; 36
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	88 2f       	mov	r24, r24
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	90 93 8f 00 	sts	0x008F, r25
    2812:	80 93 8e 00 	sts	0x008E, r24
		gu16_res |= (uint16_t)(ADCH<<8);
    2816:	e5 e2       	ldi	r30, 0x25	; 37
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	98 2f       	mov	r25, r24
    2822:	88 27       	eor	r24, r24
    2824:	9c 01       	movw	r18, r24
    2826:	80 91 8e 00 	lds	r24, 0x008E
    282a:	90 91 8f 00 	lds	r25, 0x008F
    282e:	82 2b       	or	r24, r18
    2830:	93 2b       	or	r25, r19
    2832:	90 93 8f 00 	sts	0x008F, r25
    2836:	80 93 8e 00 	sts	0x008E, r24
		gu8_no=0;
    283a:	10 92 92 00 	sts	0x0092, r1
	}

}
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	ff 91       	pop	r31
    2844:	ef 91       	pop	r30
    2846:	9f 91       	pop	r25
    2848:	8f 91       	pop	r24
    284a:	3f 91       	pop	r19
    284c:	2f 91       	pop	r18
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	0f 90       	pop	r0
    2854:	1f 90       	pop	r1
    2856:	18 95       	reti

00002858 <main>:
int main(void)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	2f 97       	sbiw	r28, 0x0f	; 15
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	de bf       	out	0x3e, r29	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	cd bf       	out	0x3d, r28	; 61
	uint32_t temp;
	LCD_init(); /* initialize LCD driver */
    286c:	0e 94 a7 0a 	call	0x154e	; 0x154e <LCD_init>

	ADC_Config_str ADC_cfg;
	Timer_cfg_s	Timer_cfg;
	/*ADC config*/
	ADC_cfg.Pre_Scaller = ADC_PRE_64;
    2870:	86 e0       	ldi	r24, 0x06	; 6
    2872:	8d 83       	std	Y+5, r24	; 0x05
	ADC_cfg.Trigger_mode = ADC_TIMER0_CMP;
    2874:	83 e0       	ldi	r24, 0x03	; 3
    2876:	8e 83       	std	Y+6, r24	; 0x06
	ADC_cfg.Channel = ADC0;
    2878:	1f 82       	std	Y+7, r1	; 0x07
	ADC_cfg.Ref = ADC_AVCC;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	89 87       	std	Y+9, r24	; 0x09
	ADC_cfg.INT_mode = ADC_INTERRUPT;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8a 87       	std	Y+10, r24	; 0x0a
	ADC_cfg.Auto_trig = ADC_AUTO_TRIGGER;
    2882:	1b 86       	std	Y+11, r1	; 0x0b
	ADC_cfg.Adj = ADC_RIGHT_ADJ;
    2884:	18 86       	std	Y+8, r1	; 0x08
	ADC_init(&ADC_cfg); /* initialize ADC driver */
    2886:	ce 01       	movw	r24, r28
    2888:	05 96       	adiw	r24, 0x05	; 5
    288a:	0e 94 94 09 	call	0x1328	; 0x1328 <ADC_init>

	/*Timer config*/
	Timer_cfg.Ch= TIMER0;
    288e:	1c 86       	std	Y+12, r1	; 0x0c
	Timer_cfg.Interrupt_Mode= INTERRUPT_MODE;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	8e 87       	std	Y+14, r24	; 0x0e
	Timer_cfg.Timer_Mode= TIMER_MODE ;
    2894:	1f 86       	std	Y+15, r1	; 0x0f
	Timer_cfg.PSC= T0_PSC_1024;
    2896:	85 e0       	ldi	r24, 0x05	; 5
    2898:	8d 87       	std	Y+13, r24	; 0x0d

	Timer_Init(&Timer_cfg);
    289a:	ce 01       	movw	r24, r28
    289c:	0c 96       	adiw	r24, 0x0c	; 12
    289e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer_Init>
	LCD_clearScreen(); /* clear LCD at the beginning */
    28a2:	0e 94 a9 13 	call	0x2752	; 0x2752 <LCD_clearScreen>

	/* display this string "Temp =    " only once at LCD */

	LCD_displayString("Temp = ");
    28a6:	80 e6       	ldi	r24, 0x60	; 96
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>
	LCD_goToRowColumn(0,10);
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	6a e0       	ldi	r22, 0x0A	; 10
    28b2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_goToRowColumn>

	/* display character 'C' on the screen "Temp =   C" */
	LCD_displayCharacter('C');
    28b6:	83 e4       	ldi	r24, 0x43	; 67
    28b8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <LCD_displayCharacter>
	Timer_Start(TIMER0,250);
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	4a ef       	ldi	r20, 0xFA	; 250
    28c0:	50 e0       	ldi	r21, 0x00	; 0
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timer_Start>
	while(1)
	{
		LCD_goToRowColumn(0,7); /* display the number every time at this position */
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	67 e0       	ldi	r22, 0x07	; 7
    28ce:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_goToRowColumn>
		ADC_readChannel(0); /* read channel two where the temp sensor is connect */
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	0e 94 35 0a 	call	0x146a	; 0x146a <ADC_readChannel>
		temp = ((uint32_t)gu16_res*150U*5U*2U)/(1023U*3U); /* calculate the temp from the ADC value*/
    28d8:	80 91 8e 00 	lds	r24, 0x008E
    28dc:	90 91 8f 00 	lds	r25, 0x008F
    28e0:	cc 01       	movw	r24, r24
    28e2:	a0 e0       	ldi	r26, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	2c ed       	ldi	r18, 0xDC	; 220
    28e8:	35 e0       	ldi	r19, 0x05	; 5
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 90 14 	call	0x2920	; 0x2920 <__mulsi3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	2d ef       	ldi	r18, 0xFD	; 253
    28fc:	3b e0       	ldi	r19, 0x0B	; 11
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 af 14 	call	0x295e	; 0x295e <__udivmodsi4>
    290a:	da 01       	movw	r26, r20
    290c:	c9 01       	movw	r24, r18
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	9a 83       	std	Y+2, r25	; 0x02
    2912:	ab 83       	std	Y+3, r26	; 0x03
    2914:	bc 83       	std	Y+4, r27	; 0x04
		LCD_intgerToString(temp); /* display the temp on LCD screen */
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_intgerToString>
    291e:	d5 cf       	rjmp	.-86     	; 0x28ca <main+0x72>

00002920 <__mulsi3>:
    2920:	62 9f       	mul	r22, r18
    2922:	d0 01       	movw	r26, r0
    2924:	73 9f       	mul	r23, r19
    2926:	f0 01       	movw	r30, r0
    2928:	82 9f       	mul	r24, r18
    292a:	e0 0d       	add	r30, r0
    292c:	f1 1d       	adc	r31, r1
    292e:	64 9f       	mul	r22, r20
    2930:	e0 0d       	add	r30, r0
    2932:	f1 1d       	adc	r31, r1
    2934:	92 9f       	mul	r25, r18
    2936:	f0 0d       	add	r31, r0
    2938:	83 9f       	mul	r24, r19
    293a:	f0 0d       	add	r31, r0
    293c:	74 9f       	mul	r23, r20
    293e:	f0 0d       	add	r31, r0
    2940:	65 9f       	mul	r22, r21
    2942:	f0 0d       	add	r31, r0
    2944:	99 27       	eor	r25, r25
    2946:	72 9f       	mul	r23, r18
    2948:	b0 0d       	add	r27, r0
    294a:	e1 1d       	adc	r30, r1
    294c:	f9 1f       	adc	r31, r25
    294e:	63 9f       	mul	r22, r19
    2950:	b0 0d       	add	r27, r0
    2952:	e1 1d       	adc	r30, r1
    2954:	f9 1f       	adc	r31, r25
    2956:	bd 01       	movw	r22, r26
    2958:	cf 01       	movw	r24, r30
    295a:	11 24       	eor	r1, r1
    295c:	08 95       	ret

0000295e <__udivmodsi4>:
    295e:	a1 e2       	ldi	r26, 0x21	; 33
    2960:	1a 2e       	mov	r1, r26
    2962:	aa 1b       	sub	r26, r26
    2964:	bb 1b       	sub	r27, r27
    2966:	fd 01       	movw	r30, r26
    2968:	0d c0       	rjmp	.+26     	; 0x2984 <__udivmodsi4_ep>

0000296a <__udivmodsi4_loop>:
    296a:	aa 1f       	adc	r26, r26
    296c:	bb 1f       	adc	r27, r27
    296e:	ee 1f       	adc	r30, r30
    2970:	ff 1f       	adc	r31, r31
    2972:	a2 17       	cp	r26, r18
    2974:	b3 07       	cpc	r27, r19
    2976:	e4 07       	cpc	r30, r20
    2978:	f5 07       	cpc	r31, r21
    297a:	20 f0       	brcs	.+8      	; 0x2984 <__udivmodsi4_ep>
    297c:	a2 1b       	sub	r26, r18
    297e:	b3 0b       	sbc	r27, r19
    2980:	e4 0b       	sbc	r30, r20
    2982:	f5 0b       	sbc	r31, r21

00002984 <__udivmodsi4_ep>:
    2984:	66 1f       	adc	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	1a 94       	dec	r1
    298e:	69 f7       	brne	.-38     	; 0x296a <__udivmodsi4_loop>
    2990:	60 95       	com	r22
    2992:	70 95       	com	r23
    2994:	80 95       	com	r24
    2996:	90 95       	com	r25
    2998:	9b 01       	movw	r18, r22
    299a:	ac 01       	movw	r20, r24
    299c:	bd 01       	movw	r22, r26
    299e:	cf 01       	movw	r24, r30
    29a0:	08 95       	ret

000029a2 <__prologue_saves__>:
    29a2:	2f 92       	push	r2
    29a4:	3f 92       	push	r3
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	ca 1b       	sub	r28, r26
    29cc:	db 0b       	sbc	r29, r27
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	09 94       	ijmp

000029da <__epilogue_restores__>:
    29da:	2a 88       	ldd	r2, Y+18	; 0x12
    29dc:	39 88       	ldd	r3, Y+17	; 0x11
    29de:	48 88       	ldd	r4, Y+16	; 0x10
    29e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    29e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    29e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    29e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    29ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ec:	b9 84       	ldd	r11, Y+9	; 0x09
    29ee:	c8 84       	ldd	r12, Y+8	; 0x08
    29f0:	df 80       	ldd	r13, Y+7	; 0x07
    29f2:	ee 80       	ldd	r14, Y+6	; 0x06
    29f4:	fd 80       	ldd	r15, Y+5	; 0x05
    29f6:	0c 81       	ldd	r16, Y+4	; 0x04
    29f8:	1b 81       	ldd	r17, Y+3	; 0x03
    29fa:	aa 81       	ldd	r26, Y+2	; 0x02
    29fc:	b9 81       	ldd	r27, Y+1	; 0x01
    29fe:	ce 0f       	add	r28, r30
    2a00:	d1 1d       	adc	r29, r1
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	ed 01       	movw	r28, r26
    2a0e:	08 95       	ret

00002a10 <itoa>:
    2a10:	fb 01       	movw	r30, r22
    2a12:	9f 01       	movw	r18, r30
    2a14:	e8 94       	clt
    2a16:	42 30       	cpi	r20, 0x02	; 2
    2a18:	c4 f0       	brlt	.+48     	; 0x2a4a <itoa+0x3a>
    2a1a:	45 32       	cpi	r20, 0x25	; 37
    2a1c:	b4 f4       	brge	.+44     	; 0x2a4a <itoa+0x3a>
    2a1e:	4a 30       	cpi	r20, 0x0A	; 10
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <itoa+0x1c>
    2a22:	97 fb       	bst	r25, 7
    2a24:	1e f4       	brtc	.+6      	; 0x2a2c <itoa+0x1c>
    2a26:	90 95       	com	r25
    2a28:	81 95       	neg	r24
    2a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2c:	64 2f       	mov	r22, r20
    2a2e:	77 27       	eor	r23, r23
    2a30:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__udivmodhi4>
    2a34:	80 5d       	subi	r24, 0xD0	; 208
    2a36:	8a 33       	cpi	r24, 0x3A	; 58
    2a38:	0c f0       	brlt	.+2      	; 0x2a3c <itoa+0x2c>
    2a3a:	89 5d       	subi	r24, 0xD9	; 217
    2a3c:	81 93       	st	Z+, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	a1 f7       	brne	.-24     	; 0x2a2c <itoa+0x1c>
    2a44:	16 f4       	brtc	.+4      	; 0x2a4a <itoa+0x3a>
    2a46:	5d e2       	ldi	r21, 0x2D	; 45
    2a48:	51 93       	st	Z+, r21
    2a4a:	10 82       	st	Z, r1
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <strrev>

00002a52 <strrev>:
    2a52:	dc 01       	movw	r26, r24
    2a54:	fc 01       	movw	r30, r24
    2a56:	67 2f       	mov	r22, r23
    2a58:	71 91       	ld	r23, Z+
    2a5a:	77 23       	and	r23, r23
    2a5c:	e1 f7       	brne	.-8      	; 0x2a56 <strrev+0x4>
    2a5e:	32 97       	sbiw	r30, 0x02	; 2
    2a60:	04 c0       	rjmp	.+8      	; 0x2a6a <strrev+0x18>
    2a62:	7c 91       	ld	r23, X
    2a64:	6d 93       	st	X+, r22
    2a66:	70 83       	st	Z, r23
    2a68:	62 91       	ld	r22, -Z
    2a6a:	ae 17       	cp	r26, r30
    2a6c:	bf 07       	cpc	r27, r31
    2a6e:	c8 f3       	brcs	.-14     	; 0x2a62 <strrev+0x10>
    2a70:	08 95       	ret

00002a72 <__udivmodhi4>:
    2a72:	aa 1b       	sub	r26, r26
    2a74:	bb 1b       	sub	r27, r27
    2a76:	51 e1       	ldi	r21, 0x11	; 17
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <__udivmodhi4_ep>

00002a7a <__udivmodhi4_loop>:
    2a7a:	aa 1f       	adc	r26, r26
    2a7c:	bb 1f       	adc	r27, r27
    2a7e:	a6 17       	cp	r26, r22
    2a80:	b7 07       	cpc	r27, r23
    2a82:	10 f0       	brcs	.+4      	; 0x2a88 <__udivmodhi4_ep>
    2a84:	a6 1b       	sub	r26, r22
    2a86:	b7 0b       	sbc	r27, r23

00002a88 <__udivmodhi4_ep>:
    2a88:	88 1f       	adc	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	5a 95       	dec	r21
    2a8e:	a9 f7       	brne	.-22     	; 0x2a7a <__udivmodhi4_loop>
    2a90:	80 95       	com	r24
    2a92:	90 95       	com	r25
    2a94:	bc 01       	movw	r22, r24
    2a96:	cd 01       	movw	r24, r26
    2a98:	08 95       	ret

00002a9a <_exit>:
    2a9a:	f8 94       	cli

00002a9c <__stop_program>:
    2a9c:	ff cf       	rjmp	.-2      	; 0x2a9c <__stop_program>
